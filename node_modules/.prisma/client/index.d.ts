
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model companies
 * 
 */
export type companies = $Result.DefaultSelection<Prisma.$companiesPayload>
/**
 * Model company_goals
 * 
 */
export type company_goals = $Result.DefaultSelection<Prisma.$company_goalsPayload>
/**
 * Model goals
 * 
 */
export type goals = $Result.DefaultSelection<Prisma.$goalsPayload>
/**
 * Model transaction_details
 * 
 */
export type transaction_details = $Result.DefaultSelection<Prisma.$transaction_detailsPayload>
/**
 * Model transactions
 * 
 */
export type transactions = $Result.DefaultSelection<Prisma.$transactionsPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Companies
 * const companies = await prisma.companies.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Companies
   * const companies = await prisma.companies.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.companies`: Exposes CRUD operations for the **companies** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Companies
    * const companies = await prisma.companies.findMany()
    * ```
    */
  get companies(): Prisma.companiesDelegate<ExtArgs>;

  /**
   * `prisma.company_goals`: Exposes CRUD operations for the **company_goals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Company_goals
    * const company_goals = await prisma.company_goals.findMany()
    * ```
    */
  get company_goals(): Prisma.company_goalsDelegate<ExtArgs>;

  /**
   * `prisma.goals`: Exposes CRUD operations for the **goals** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Goals
    * const goals = await prisma.goals.findMany()
    * ```
    */
  get goals(): Prisma.goalsDelegate<ExtArgs>;

  /**
   * `prisma.transaction_details`: Exposes CRUD operations for the **transaction_details** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transaction_details
    * const transaction_details = await prisma.transaction_details.findMany()
    * ```
    */
  get transaction_details(): Prisma.transaction_detailsDelegate<ExtArgs>;

  /**
   * `prisma.transactions`: Exposes CRUD operations for the **transactions** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transactions.findMany()
    * ```
    */
  get transactions(): Prisma.transactionsDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.1
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    companies: 'companies',
    company_goals: 'company_goals',
    goals: 'goals',
    transaction_details: 'transaction_details',
    transactions: 'transactions',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "companies" | "company_goals" | "goals" | "transaction_details" | "transactions" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      companies: {
        payload: Prisma.$companiesPayload<ExtArgs>
        fields: Prisma.companiesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.companiesFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.companiesFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          findFirst: {
            args: Prisma.companiesFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.companiesFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          findMany: {
            args: Prisma.companiesFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>[]
          }
          create: {
            args: Prisma.companiesCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          createMany: {
            args: Prisma.companiesCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.companiesCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>[]
          }
          delete: {
            args: Prisma.companiesDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          update: {
            args: Prisma.companiesUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          deleteMany: {
            args: Prisma.companiesDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.companiesUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.companiesUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$companiesPayload>
          }
          aggregate: {
            args: Prisma.CompaniesAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompanies>
          }
          groupBy: {
            args: Prisma.companiesGroupByArgs<ExtArgs>
            result: $Utils.Optional<CompaniesGroupByOutputType>[]
          }
          count: {
            args: Prisma.companiesCountArgs<ExtArgs>
            result: $Utils.Optional<CompaniesCountAggregateOutputType> | number
          }
        }
      }
      company_goals: {
        payload: Prisma.$company_goalsPayload<ExtArgs>
        fields: Prisma.company_goalsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.company_goalsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.company_goalsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>
          }
          findFirst: {
            args: Prisma.company_goalsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.company_goalsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>
          }
          findMany: {
            args: Prisma.company_goalsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>[]
          }
          create: {
            args: Prisma.company_goalsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>
          }
          createMany: {
            args: Prisma.company_goalsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.company_goalsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>[]
          }
          delete: {
            args: Prisma.company_goalsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>
          }
          update: {
            args: Prisma.company_goalsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>
          }
          deleteMany: {
            args: Prisma.company_goalsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.company_goalsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.company_goalsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$company_goalsPayload>
          }
          aggregate: {
            args: Prisma.Company_goalsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCompany_goals>
          }
          groupBy: {
            args: Prisma.company_goalsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Company_goalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.company_goalsCountArgs<ExtArgs>
            result: $Utils.Optional<Company_goalsCountAggregateOutputType> | number
          }
        }
      }
      goals: {
        payload: Prisma.$goalsPayload<ExtArgs>
        fields: Prisma.goalsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.goalsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.goalsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          findFirst: {
            args: Prisma.goalsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.goalsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          findMany: {
            args: Prisma.goalsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>[]
          }
          create: {
            args: Prisma.goalsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          createMany: {
            args: Prisma.goalsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.goalsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>[]
          }
          delete: {
            args: Prisma.goalsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          update: {
            args: Prisma.goalsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          deleteMany: {
            args: Prisma.goalsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.goalsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.goalsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$goalsPayload>
          }
          aggregate: {
            args: Prisma.GoalsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateGoals>
          }
          groupBy: {
            args: Prisma.goalsGroupByArgs<ExtArgs>
            result: $Utils.Optional<GoalsGroupByOutputType>[]
          }
          count: {
            args: Prisma.goalsCountArgs<ExtArgs>
            result: $Utils.Optional<GoalsCountAggregateOutputType> | number
          }
        }
      }
      transaction_details: {
        payload: Prisma.$transaction_detailsPayload<ExtArgs>
        fields: Prisma.transaction_detailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transaction_detailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transaction_detailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>
          }
          findFirst: {
            args: Prisma.transaction_detailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transaction_detailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>
          }
          findMany: {
            args: Prisma.transaction_detailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>[]
          }
          create: {
            args: Prisma.transaction_detailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>
          }
          createMany: {
            args: Prisma.transaction_detailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transaction_detailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>[]
          }
          delete: {
            args: Prisma.transaction_detailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>
          }
          update: {
            args: Prisma.transaction_detailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>
          }
          deleteMany: {
            args: Prisma.transaction_detailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transaction_detailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.transaction_detailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transaction_detailsPayload>
          }
          aggregate: {
            args: Prisma.Transaction_detailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction_details>
          }
          groupBy: {
            args: Prisma.transaction_detailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<Transaction_detailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.transaction_detailsCountArgs<ExtArgs>
            result: $Utils.Optional<Transaction_detailsCountAggregateOutputType> | number
          }
        }
      }
      transactions: {
        payload: Prisma.$transactionsPayload<ExtArgs>
        fields: Prisma.transactionsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.transactionsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.transactionsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findFirst: {
            args: Prisma.transactionsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.transactionsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          findMany: {
            args: Prisma.transactionsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          create: {
            args: Prisma.transactionsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          createMany: {
            args: Prisma.transactionsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.transactionsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>[]
          }
          delete: {
            args: Prisma.transactionsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          update: {
            args: Prisma.transactionsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          deleteMany: {
            args: Prisma.transactionsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.transactionsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.transactionsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$transactionsPayload>
          }
          aggregate: {
            args: Prisma.TransactionsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactions>
          }
          groupBy: {
            args: Prisma.transactionsGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionsGroupByOutputType>[]
          }
          count: {
            args: Prisma.transactionsCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionsCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CompaniesCountOutputType
   */

  export type CompaniesCountOutputType = {
    company_goals: number
    goals: number
    transactions: number
    users: number
  }

  export type CompaniesCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company_goals?: boolean | CompaniesCountOutputTypeCountCompany_goalsArgs
    goals?: boolean | CompaniesCountOutputTypeCountGoalsArgs
    transactions?: boolean | CompaniesCountOutputTypeCountTransactionsArgs
    users?: boolean | CompaniesCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CompaniesCountOutputType
     */
    select?: CompaniesCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountCompany_goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: company_goalsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountGoalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: goalsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
  }

  /**
   * CompaniesCountOutputType without action
   */
  export type CompaniesCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
  }


  /**
   * Count Type TransactionsCountOutputType
   */

  export type TransactionsCountOutputType = {
    transaction_details: number
  }

  export type TransactionsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction_details?: boolean | TransactionsCountOutputTypeCountTransaction_detailsArgs
  }

  // Custom InputTypes
  /**
   * TransactionsCountOutputType without action
   */
  export type TransactionsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionsCountOutputType
     */
    select?: TransactionsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionsCountOutputType without action
   */
  export type TransactionsCountOutputTypeCountTransaction_detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transaction_detailsWhereInput
  }


  /**
   * Models
   */

  /**
   * Model companies
   */

  export type AggregateCompanies = {
    _count: CompaniesCountAggregateOutputType | null
    _avg: CompaniesAvgAggregateOutputType | null
    _sum: CompaniesSumAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  export type CompaniesAvgAggregateOutputType = {
    id: number | null
    revenue: Decimal | null
    expenses: Decimal | null
  }

  export type CompaniesSumAggregateOutputType = {
    id: number | null
    revenue: Decimal | null
    expenses: Decimal | null
  }

  export type CompaniesMinAggregateOutputType = {
    id: number | null
    name: string | null
    revenue: Decimal | null
    expenses: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompaniesMaxAggregateOutputType = {
    id: number | null
    name: string | null
    revenue: Decimal | null
    expenses: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type CompaniesCountAggregateOutputType = {
    id: number
    name: number
    revenue: number
    expenses: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type CompaniesAvgAggregateInputType = {
    id?: true
    revenue?: true
    expenses?: true
  }

  export type CompaniesSumAggregateInputType = {
    id?: true
    revenue?: true
    expenses?: true
  }

  export type CompaniesMinAggregateInputType = {
    id?: true
    name?: true
    revenue?: true
    expenses?: true
    created_at?: true
    updated_at?: true
  }

  export type CompaniesMaxAggregateInputType = {
    id?: true
    name?: true
    revenue?: true
    expenses?: true
    created_at?: true
    updated_at?: true
  }

  export type CompaniesCountAggregateInputType = {
    id?: true
    name?: true
    revenue?: true
    expenses?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type CompaniesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which companies to aggregate.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned companies
    **/
    _count?: true | CompaniesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CompaniesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CompaniesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CompaniesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CompaniesMaxAggregateInputType
  }

  export type GetCompaniesAggregateType<T extends CompaniesAggregateArgs> = {
        [P in keyof T & keyof AggregateCompanies]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompanies[P]>
      : GetScalarType<T[P], AggregateCompanies[P]>
  }




  export type companiesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: companiesWhereInput
    orderBy?: companiesOrderByWithAggregationInput | companiesOrderByWithAggregationInput[]
    by: CompaniesScalarFieldEnum[] | CompaniesScalarFieldEnum
    having?: companiesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CompaniesCountAggregateInputType | true
    _avg?: CompaniesAvgAggregateInputType
    _sum?: CompaniesSumAggregateInputType
    _min?: CompaniesMinAggregateInputType
    _max?: CompaniesMaxAggregateInputType
  }

  export type CompaniesGroupByOutputType = {
    id: number
    name: string
    revenue: Decimal
    expenses: Decimal
    created_at: Date | null
    updated_at: Date | null
    _count: CompaniesCountAggregateOutputType | null
    _avg: CompaniesAvgAggregateOutputType | null
    _sum: CompaniesSumAggregateOutputType | null
    _min: CompaniesMinAggregateOutputType | null
    _max: CompaniesMaxAggregateOutputType | null
  }

  type GetCompaniesGroupByPayload<T extends companiesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CompaniesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CompaniesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
            : GetScalarType<T[P], CompaniesGroupByOutputType[P]>
        }
      >
    >


  export type companiesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    revenue?: boolean
    expenses?: boolean
    created_at?: boolean
    updated_at?: boolean
    company_goals?: boolean | companies$company_goalsArgs<ExtArgs>
    goals?: boolean | companies$goalsArgs<ExtArgs>
    transactions?: boolean | companies$transactionsArgs<ExtArgs>
    users?: boolean | companies$usersArgs<ExtArgs>
    _count?: boolean | CompaniesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["companies"]>

  export type companiesSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    revenue?: boolean
    expenses?: boolean
    created_at?: boolean
    updated_at?: boolean
  }, ExtArgs["result"]["companies"]>

  export type companiesSelectScalar = {
    id?: boolean
    name?: boolean
    revenue?: boolean
    expenses?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type companiesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    company_goals?: boolean | companies$company_goalsArgs<ExtArgs>
    goals?: boolean | companies$goalsArgs<ExtArgs>
    transactions?: boolean | companies$transactionsArgs<ExtArgs>
    users?: boolean | companies$usersArgs<ExtArgs>
    _count?: boolean | CompaniesCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type companiesIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $companiesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "companies"
    objects: {
      company_goals: Prisma.$company_goalsPayload<ExtArgs>[]
      goals: Prisma.$goalsPayload<ExtArgs>[]
      transactions: Prisma.$transactionsPayload<ExtArgs>[]
      users: Prisma.$usersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      revenue: Prisma.Decimal
      expenses: Prisma.Decimal
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["companies"]>
    composites: {}
  }

  type companiesGetPayload<S extends boolean | null | undefined | companiesDefaultArgs> = $Result.GetResult<Prisma.$companiesPayload, S>

  type companiesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<companiesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CompaniesCountAggregateInputType | true
    }

  export interface companiesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['companies'], meta: { name: 'companies' } }
    /**
     * Find zero or one Companies that matches the filter.
     * @param {companiesFindUniqueArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends companiesFindUniqueArgs>(args: SelectSubset<T, companiesFindUniqueArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Companies that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {companiesFindUniqueOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends companiesFindUniqueOrThrowArgs>(args: SelectSubset<T, companiesFindUniqueOrThrowArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindFirstArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends companiesFindFirstArgs>(args?: SelectSubset<T, companiesFindFirstArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Companies that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindFirstOrThrowArgs} args - Arguments to find a Companies
     * @example
     * // Get one Companies
     * const companies = await prisma.companies.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends companiesFindFirstOrThrowArgs>(args?: SelectSubset<T, companiesFindFirstOrThrowArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Companies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Companies
     * const companies = await prisma.companies.findMany()
     * 
     * // Get first 10 Companies
     * const companies = await prisma.companies.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const companiesWithIdOnly = await prisma.companies.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends companiesFindManyArgs>(args?: SelectSubset<T, companiesFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Companies.
     * @param {companiesCreateArgs} args - Arguments to create a Companies.
     * @example
     * // Create one Companies
     * const Companies = await prisma.companies.create({
     *   data: {
     *     // ... data to create a Companies
     *   }
     * })
     * 
     */
    create<T extends companiesCreateArgs>(args: SelectSubset<T, companiesCreateArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Companies.
     * @param {companiesCreateManyArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const companies = await prisma.companies.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends companiesCreateManyArgs>(args?: SelectSubset<T, companiesCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Companies and returns the data saved in the database.
     * @param {companiesCreateManyAndReturnArgs} args - Arguments to create many Companies.
     * @example
     * // Create many Companies
     * const companies = await prisma.companies.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Companies and only return the `id`
     * const companiesWithIdOnly = await prisma.companies.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends companiesCreateManyAndReturnArgs>(args?: SelectSubset<T, companiesCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Companies.
     * @param {companiesDeleteArgs} args - Arguments to delete one Companies.
     * @example
     * // Delete one Companies
     * const Companies = await prisma.companies.delete({
     *   where: {
     *     // ... filter to delete one Companies
     *   }
     * })
     * 
     */
    delete<T extends companiesDeleteArgs>(args: SelectSubset<T, companiesDeleteArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Companies.
     * @param {companiesUpdateArgs} args - Arguments to update one Companies.
     * @example
     * // Update one Companies
     * const companies = await prisma.companies.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends companiesUpdateArgs>(args: SelectSubset<T, companiesUpdateArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Companies.
     * @param {companiesDeleteManyArgs} args - Arguments to filter Companies to delete.
     * @example
     * // Delete a few Companies
     * const { count } = await prisma.companies.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends companiesDeleteManyArgs>(args?: SelectSubset<T, companiesDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Companies
     * const companies = await prisma.companies.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends companiesUpdateManyArgs>(args: SelectSubset<T, companiesUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Companies.
     * @param {companiesUpsertArgs} args - Arguments to update or create a Companies.
     * @example
     * // Update or create a Companies
     * const companies = await prisma.companies.upsert({
     *   create: {
     *     // ... data to create a Companies
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Companies we want to update
     *   }
     * })
     */
    upsert<T extends companiesUpsertArgs>(args: SelectSubset<T, companiesUpsertArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesCountArgs} args - Arguments to filter Companies to count.
     * @example
     * // Count the number of Companies
     * const count = await prisma.companies.count({
     *   where: {
     *     // ... the filter for the Companies we want to count
     *   }
     * })
    **/
    count<T extends companiesCountArgs>(
      args?: Subset<T, companiesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CompaniesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CompaniesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CompaniesAggregateArgs>(args: Subset<T, CompaniesAggregateArgs>): Prisma.PrismaPromise<GetCompaniesAggregateType<T>>

    /**
     * Group by Companies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {companiesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends companiesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: companiesGroupByArgs['orderBy'] }
        : { orderBy?: companiesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, companiesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompaniesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the companies model
   */
  readonly fields: companiesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for companies.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__companiesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    company_goals<T extends companies$company_goalsArgs<ExtArgs> = {}>(args?: Subset<T, companies$company_goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "findMany"> | Null>
    goals<T extends companies$goalsArgs<ExtArgs> = {}>(args?: Subset<T, companies$goalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findMany"> | Null>
    transactions<T extends companies$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, companies$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany"> | Null>
    users<T extends companies$usersArgs<ExtArgs> = {}>(args?: Subset<T, companies$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the companies model
   */ 
  interface companiesFieldRefs {
    readonly id: FieldRef<"companies", 'Int'>
    readonly name: FieldRef<"companies", 'String'>
    readonly revenue: FieldRef<"companies", 'Decimal'>
    readonly expenses: FieldRef<"companies", 'Decimal'>
    readonly created_at: FieldRef<"companies", 'DateTime'>
    readonly updated_at: FieldRef<"companies", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * companies findUnique
   */
  export type companiesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies findUniqueOrThrow
   */
  export type companiesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies findFirst
   */
  export type companiesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * companies findFirstOrThrow
   */
  export type companiesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for companies.
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of companies.
     */
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * companies findMany
   */
  export type companiesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter, which companies to fetch.
     */
    where?: companiesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of companies to fetch.
     */
    orderBy?: companiesOrderByWithRelationInput | companiesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing companies.
     */
    cursor?: companiesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` companies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` companies.
     */
    skip?: number
    distinct?: CompaniesScalarFieldEnum | CompaniesScalarFieldEnum[]
  }

  /**
   * companies create
   */
  export type companiesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * The data needed to create a companies.
     */
    data: XOR<companiesCreateInput, companiesUncheckedCreateInput>
  }

  /**
   * companies createMany
   */
  export type companiesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many companies.
     */
    data: companiesCreateManyInput | companiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * companies createManyAndReturn
   */
  export type companiesCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many companies.
     */
    data: companiesCreateManyInput | companiesCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * companies update
   */
  export type companiesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * The data needed to update a companies.
     */
    data: XOR<companiesUpdateInput, companiesUncheckedUpdateInput>
    /**
     * Choose, which companies to update.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies updateMany
   */
  export type companiesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update companies.
     */
    data: XOR<companiesUpdateManyMutationInput, companiesUncheckedUpdateManyInput>
    /**
     * Filter which companies to update
     */
    where?: companiesWhereInput
  }

  /**
   * companies upsert
   */
  export type companiesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * The filter to search for the companies to update in case it exists.
     */
    where: companiesWhereUniqueInput
    /**
     * In case the companies found by the `where` argument doesn't exist, create a new companies with this data.
     */
    create: XOR<companiesCreateInput, companiesUncheckedCreateInput>
    /**
     * In case the companies was found with the provided `where` argument, update it with this data.
     */
    update: XOR<companiesUpdateInput, companiesUncheckedUpdateInput>
  }

  /**
   * companies delete
   */
  export type companiesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    /**
     * Filter which companies to delete.
     */
    where: companiesWhereUniqueInput
  }

  /**
   * companies deleteMany
   */
  export type companiesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which companies to delete
     */
    where?: companiesWhereInput
  }

  /**
   * companies.company_goals
   */
  export type companies$company_goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    where?: company_goalsWhereInput
    orderBy?: company_goalsOrderByWithRelationInput | company_goalsOrderByWithRelationInput[]
    cursor?: company_goalsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Company_goalsScalarFieldEnum | Company_goalsScalarFieldEnum[]
  }

  /**
   * companies.goals
   */
  export type companies$goalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    where?: goalsWhereInput
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    cursor?: goalsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * companies.transactions
   */
  export type companies$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    cursor?: transactionsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * companies.users
   */
  export type companies$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    where?: usersWhereInput
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    cursor?: usersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * companies without action
   */
  export type companiesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
  }


  /**
   * Model company_goals
   */

  export type AggregateCompany_goals = {
    _count: Company_goalsCountAggregateOutputType | null
    _avg: Company_goalsAvgAggregateOutputType | null
    _sum: Company_goalsSumAggregateOutputType | null
    _min: Company_goalsMinAggregateOutputType | null
    _max: Company_goalsMaxAggregateOutputType | null
  }

  export type Company_goalsAvgAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
  }

  export type Company_goalsSumAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
  }

  export type Company_goalsMinAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
    description: string | null
    deadline: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Company_goalsMaxAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
    description: string | null
    deadline: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Company_goalsCountAggregateOutputType = {
    id: number
    company_id: number
    goal_value: number
    description: number
    deadline: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Company_goalsAvgAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
  }

  export type Company_goalsSumAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
  }

  export type Company_goalsMinAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
    description?: true
    deadline?: true
    created_at?: true
    updated_at?: true
  }

  export type Company_goalsMaxAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
    description?: true
    deadline?: true
    created_at?: true
    updated_at?: true
  }

  export type Company_goalsCountAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
    description?: true
    deadline?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Company_goalsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which company_goals to aggregate.
     */
    where?: company_goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of company_goals to fetch.
     */
    orderBy?: company_goalsOrderByWithRelationInput | company_goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: company_goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned company_goals
    **/
    _count?: true | Company_goalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Company_goalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Company_goalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Company_goalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Company_goalsMaxAggregateInputType
  }

  export type GetCompany_goalsAggregateType<T extends Company_goalsAggregateArgs> = {
        [P in keyof T & keyof AggregateCompany_goals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCompany_goals[P]>
      : GetScalarType<T[P], AggregateCompany_goals[P]>
  }




  export type company_goalsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: company_goalsWhereInput
    orderBy?: company_goalsOrderByWithAggregationInput | company_goalsOrderByWithAggregationInput[]
    by: Company_goalsScalarFieldEnum[] | Company_goalsScalarFieldEnum
    having?: company_goalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Company_goalsCountAggregateInputType | true
    _avg?: Company_goalsAvgAggregateInputType
    _sum?: Company_goalsSumAggregateInputType
    _min?: Company_goalsMinAggregateInputType
    _max?: Company_goalsMaxAggregateInputType
  }

  export type Company_goalsGroupByOutputType = {
    id: number
    company_id: number | null
    goal_value: Decimal
    description: string
    deadline: Date
    created_at: Date | null
    updated_at: Date | null
    _count: Company_goalsCountAggregateOutputType | null
    _avg: Company_goalsAvgAggregateOutputType | null
    _sum: Company_goalsSumAggregateOutputType | null
    _min: Company_goalsMinAggregateOutputType | null
    _max: Company_goalsMaxAggregateOutputType | null
  }

  type GetCompany_goalsGroupByPayload<T extends company_goalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Company_goalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Company_goalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Company_goalsGroupByOutputType[P]>
            : GetScalarType<T[P], Company_goalsGroupByOutputType[P]>
        }
      >
    >


  export type company_goalsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    goal_value?: boolean
    description?: boolean
    deadline?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | company_goals$companiesArgs<ExtArgs>
  }, ExtArgs["result"]["company_goals"]>

  export type company_goalsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    goal_value?: boolean
    description?: boolean
    deadline?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | company_goals$companiesArgs<ExtArgs>
  }, ExtArgs["result"]["company_goals"]>

  export type company_goalsSelectScalar = {
    id?: boolean
    company_id?: boolean
    goal_value?: boolean
    description?: boolean
    deadline?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type company_goalsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | company_goals$companiesArgs<ExtArgs>
  }
  export type company_goalsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | company_goals$companiesArgs<ExtArgs>
  }

  export type $company_goalsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "company_goals"
    objects: {
      companies: Prisma.$companiesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company_id: number | null
      goal_value: Prisma.Decimal
      description: string
      deadline: Date
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["company_goals"]>
    composites: {}
  }

  type company_goalsGetPayload<S extends boolean | null | undefined | company_goalsDefaultArgs> = $Result.GetResult<Prisma.$company_goalsPayload, S>

  type company_goalsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<company_goalsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Company_goalsCountAggregateInputType | true
    }

  export interface company_goalsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['company_goals'], meta: { name: 'company_goals' } }
    /**
     * Find zero or one Company_goals that matches the filter.
     * @param {company_goalsFindUniqueArgs} args - Arguments to find a Company_goals
     * @example
     * // Get one Company_goals
     * const company_goals = await prisma.company_goals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends company_goalsFindUniqueArgs>(args: SelectSubset<T, company_goalsFindUniqueArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Company_goals that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {company_goalsFindUniqueOrThrowArgs} args - Arguments to find a Company_goals
     * @example
     * // Get one Company_goals
     * const company_goals = await prisma.company_goals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends company_goalsFindUniqueOrThrowArgs>(args: SelectSubset<T, company_goalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Company_goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_goalsFindFirstArgs} args - Arguments to find a Company_goals
     * @example
     * // Get one Company_goals
     * const company_goals = await prisma.company_goals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends company_goalsFindFirstArgs>(args?: SelectSubset<T, company_goalsFindFirstArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Company_goals that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_goalsFindFirstOrThrowArgs} args - Arguments to find a Company_goals
     * @example
     * // Get one Company_goals
     * const company_goals = await prisma.company_goals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends company_goalsFindFirstOrThrowArgs>(args?: SelectSubset<T, company_goalsFindFirstOrThrowArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Company_goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_goalsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Company_goals
     * const company_goals = await prisma.company_goals.findMany()
     * 
     * // Get first 10 Company_goals
     * const company_goals = await prisma.company_goals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const company_goalsWithIdOnly = await prisma.company_goals.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends company_goalsFindManyArgs>(args?: SelectSubset<T, company_goalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Company_goals.
     * @param {company_goalsCreateArgs} args - Arguments to create a Company_goals.
     * @example
     * // Create one Company_goals
     * const Company_goals = await prisma.company_goals.create({
     *   data: {
     *     // ... data to create a Company_goals
     *   }
     * })
     * 
     */
    create<T extends company_goalsCreateArgs>(args: SelectSubset<T, company_goalsCreateArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Company_goals.
     * @param {company_goalsCreateManyArgs} args - Arguments to create many Company_goals.
     * @example
     * // Create many Company_goals
     * const company_goals = await prisma.company_goals.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends company_goalsCreateManyArgs>(args?: SelectSubset<T, company_goalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Company_goals and returns the data saved in the database.
     * @param {company_goalsCreateManyAndReturnArgs} args - Arguments to create many Company_goals.
     * @example
     * // Create many Company_goals
     * const company_goals = await prisma.company_goals.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Company_goals and only return the `id`
     * const company_goalsWithIdOnly = await prisma.company_goals.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends company_goalsCreateManyAndReturnArgs>(args?: SelectSubset<T, company_goalsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Company_goals.
     * @param {company_goalsDeleteArgs} args - Arguments to delete one Company_goals.
     * @example
     * // Delete one Company_goals
     * const Company_goals = await prisma.company_goals.delete({
     *   where: {
     *     // ... filter to delete one Company_goals
     *   }
     * })
     * 
     */
    delete<T extends company_goalsDeleteArgs>(args: SelectSubset<T, company_goalsDeleteArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Company_goals.
     * @param {company_goalsUpdateArgs} args - Arguments to update one Company_goals.
     * @example
     * // Update one Company_goals
     * const company_goals = await prisma.company_goals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends company_goalsUpdateArgs>(args: SelectSubset<T, company_goalsUpdateArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Company_goals.
     * @param {company_goalsDeleteManyArgs} args - Arguments to filter Company_goals to delete.
     * @example
     * // Delete a few Company_goals
     * const { count } = await prisma.company_goals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends company_goalsDeleteManyArgs>(args?: SelectSubset<T, company_goalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Company_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_goalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Company_goals
     * const company_goals = await prisma.company_goals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends company_goalsUpdateManyArgs>(args: SelectSubset<T, company_goalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Company_goals.
     * @param {company_goalsUpsertArgs} args - Arguments to update or create a Company_goals.
     * @example
     * // Update or create a Company_goals
     * const company_goals = await prisma.company_goals.upsert({
     *   create: {
     *     // ... data to create a Company_goals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Company_goals we want to update
     *   }
     * })
     */
    upsert<T extends company_goalsUpsertArgs>(args: SelectSubset<T, company_goalsUpsertArgs<ExtArgs>>): Prisma__company_goalsClient<$Result.GetResult<Prisma.$company_goalsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Company_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_goalsCountArgs} args - Arguments to filter Company_goals to count.
     * @example
     * // Count the number of Company_goals
     * const count = await prisma.company_goals.count({
     *   where: {
     *     // ... the filter for the Company_goals we want to count
     *   }
     * })
    **/
    count<T extends company_goalsCountArgs>(
      args?: Subset<T, company_goalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Company_goalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Company_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Company_goalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Company_goalsAggregateArgs>(args: Subset<T, Company_goalsAggregateArgs>): Prisma.PrismaPromise<GetCompany_goalsAggregateType<T>>

    /**
     * Group by Company_goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {company_goalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends company_goalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: company_goalsGroupByArgs['orderBy'] }
        : { orderBy?: company_goalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, company_goalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCompany_goalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the company_goals model
   */
  readonly fields: company_goalsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for company_goals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__company_goalsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends company_goals$companiesArgs<ExtArgs> = {}>(args?: Subset<T, company_goals$companiesArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the company_goals model
   */ 
  interface company_goalsFieldRefs {
    readonly id: FieldRef<"company_goals", 'Int'>
    readonly company_id: FieldRef<"company_goals", 'Int'>
    readonly goal_value: FieldRef<"company_goals", 'Decimal'>
    readonly description: FieldRef<"company_goals", 'String'>
    readonly deadline: FieldRef<"company_goals", 'DateTime'>
    readonly created_at: FieldRef<"company_goals", 'DateTime'>
    readonly updated_at: FieldRef<"company_goals", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * company_goals findUnique
   */
  export type company_goalsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * Filter, which company_goals to fetch.
     */
    where: company_goalsWhereUniqueInput
  }

  /**
   * company_goals findUniqueOrThrow
   */
  export type company_goalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * Filter, which company_goals to fetch.
     */
    where: company_goalsWhereUniqueInput
  }

  /**
   * company_goals findFirst
   */
  export type company_goalsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * Filter, which company_goals to fetch.
     */
    where?: company_goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of company_goals to fetch.
     */
    orderBy?: company_goalsOrderByWithRelationInput | company_goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for company_goals.
     */
    cursor?: company_goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of company_goals.
     */
    distinct?: Company_goalsScalarFieldEnum | Company_goalsScalarFieldEnum[]
  }

  /**
   * company_goals findFirstOrThrow
   */
  export type company_goalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * Filter, which company_goals to fetch.
     */
    where?: company_goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of company_goals to fetch.
     */
    orderBy?: company_goalsOrderByWithRelationInput | company_goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for company_goals.
     */
    cursor?: company_goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of company_goals.
     */
    distinct?: Company_goalsScalarFieldEnum | Company_goalsScalarFieldEnum[]
  }

  /**
   * company_goals findMany
   */
  export type company_goalsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * Filter, which company_goals to fetch.
     */
    where?: company_goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of company_goals to fetch.
     */
    orderBy?: company_goalsOrderByWithRelationInput | company_goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing company_goals.
     */
    cursor?: company_goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` company_goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` company_goals.
     */
    skip?: number
    distinct?: Company_goalsScalarFieldEnum | Company_goalsScalarFieldEnum[]
  }

  /**
   * company_goals create
   */
  export type company_goalsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * The data needed to create a company_goals.
     */
    data: XOR<company_goalsCreateInput, company_goalsUncheckedCreateInput>
  }

  /**
   * company_goals createMany
   */
  export type company_goalsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many company_goals.
     */
    data: company_goalsCreateManyInput | company_goalsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * company_goals createManyAndReturn
   */
  export type company_goalsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many company_goals.
     */
    data: company_goalsCreateManyInput | company_goalsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * company_goals update
   */
  export type company_goalsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * The data needed to update a company_goals.
     */
    data: XOR<company_goalsUpdateInput, company_goalsUncheckedUpdateInput>
    /**
     * Choose, which company_goals to update.
     */
    where: company_goalsWhereUniqueInput
  }

  /**
   * company_goals updateMany
   */
  export type company_goalsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update company_goals.
     */
    data: XOR<company_goalsUpdateManyMutationInput, company_goalsUncheckedUpdateManyInput>
    /**
     * Filter which company_goals to update
     */
    where?: company_goalsWhereInput
  }

  /**
   * company_goals upsert
   */
  export type company_goalsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * The filter to search for the company_goals to update in case it exists.
     */
    where: company_goalsWhereUniqueInput
    /**
     * In case the company_goals found by the `where` argument doesn't exist, create a new company_goals with this data.
     */
    create: XOR<company_goalsCreateInput, company_goalsUncheckedCreateInput>
    /**
     * In case the company_goals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<company_goalsUpdateInput, company_goalsUncheckedUpdateInput>
  }

  /**
   * company_goals delete
   */
  export type company_goalsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
    /**
     * Filter which company_goals to delete.
     */
    where: company_goalsWhereUniqueInput
  }

  /**
   * company_goals deleteMany
   */
  export type company_goalsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which company_goals to delete
     */
    where?: company_goalsWhereInput
  }

  /**
   * company_goals.companies
   */
  export type company_goals$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    where?: companiesWhereInput
  }

  /**
   * company_goals without action
   */
  export type company_goalsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the company_goals
     */
    select?: company_goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: company_goalsInclude<ExtArgs> | null
  }


  /**
   * Model goals
   */

  export type AggregateGoals = {
    _count: GoalsCountAggregateOutputType | null
    _avg: GoalsAvgAggregateOutputType | null
    _sum: GoalsSumAggregateOutputType | null
    _min: GoalsMinAggregateOutputType | null
    _max: GoalsMaxAggregateOutputType | null
  }

  export type GoalsAvgAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
  }

  export type GoalsSumAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
  }

  export type GoalsMinAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
    description: string | null
    deadline: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type GoalsMaxAggregateOutputType = {
    id: number | null
    company_id: number | null
    goal_value: Decimal | null
    description: string | null
    deadline: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type GoalsCountAggregateOutputType = {
    id: number
    company_id: number
    goal_value: number
    description: number
    deadline: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type GoalsAvgAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
  }

  export type GoalsSumAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
  }

  export type GoalsMinAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
    description?: true
    deadline?: true
    created_at?: true
    updated_at?: true
  }

  export type GoalsMaxAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
    description?: true
    deadline?: true
    created_at?: true
    updated_at?: true
  }

  export type GoalsCountAggregateInputType = {
    id?: true
    company_id?: true
    goal_value?: true
    description?: true
    deadline?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type GoalsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which goals to aggregate.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned goals
    **/
    _count?: true | GoalsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GoalsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GoalsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GoalsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GoalsMaxAggregateInputType
  }

  export type GetGoalsAggregateType<T extends GoalsAggregateArgs> = {
        [P in keyof T & keyof AggregateGoals]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGoals[P]>
      : GetScalarType<T[P], AggregateGoals[P]>
  }




  export type goalsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: goalsWhereInput
    orderBy?: goalsOrderByWithAggregationInput | goalsOrderByWithAggregationInput[]
    by: GoalsScalarFieldEnum[] | GoalsScalarFieldEnum
    having?: goalsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GoalsCountAggregateInputType | true
    _avg?: GoalsAvgAggregateInputType
    _sum?: GoalsSumAggregateInputType
    _min?: GoalsMinAggregateInputType
    _max?: GoalsMaxAggregateInputType
  }

  export type GoalsGroupByOutputType = {
    id: number
    company_id: number | null
    goal_value: Decimal
    description: string
    deadline: Date
    created_at: Date | null
    updated_at: Date | null
    _count: GoalsCountAggregateOutputType | null
    _avg: GoalsAvgAggregateOutputType | null
    _sum: GoalsSumAggregateOutputType | null
    _min: GoalsMinAggregateOutputType | null
    _max: GoalsMaxAggregateOutputType | null
  }

  type GetGoalsGroupByPayload<T extends goalsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GoalsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GoalsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GoalsGroupByOutputType[P]>
            : GetScalarType<T[P], GoalsGroupByOutputType[P]>
        }
      >
    >


  export type goalsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    goal_value?: boolean
    description?: boolean
    deadline?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | goals$companiesArgs<ExtArgs>
  }, ExtArgs["result"]["goals"]>

  export type goalsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    goal_value?: boolean
    description?: boolean
    deadline?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | goals$companiesArgs<ExtArgs>
  }, ExtArgs["result"]["goals"]>

  export type goalsSelectScalar = {
    id?: boolean
    company_id?: boolean
    goal_value?: boolean
    description?: boolean
    deadline?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type goalsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | goals$companiesArgs<ExtArgs>
  }
  export type goalsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | goals$companiesArgs<ExtArgs>
  }

  export type $goalsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "goals"
    objects: {
      companies: Prisma.$companiesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company_id: number | null
      goal_value: Prisma.Decimal
      description: string
      deadline: Date
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["goals"]>
    composites: {}
  }

  type goalsGetPayload<S extends boolean | null | undefined | goalsDefaultArgs> = $Result.GetResult<Prisma.$goalsPayload, S>

  type goalsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<goalsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: GoalsCountAggregateInputType | true
    }

  export interface goalsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['goals'], meta: { name: 'goals' } }
    /**
     * Find zero or one Goals that matches the filter.
     * @param {goalsFindUniqueArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends goalsFindUniqueArgs>(args: SelectSubset<T, goalsFindUniqueArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Goals that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {goalsFindUniqueOrThrowArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends goalsFindUniqueOrThrowArgs>(args: SelectSubset<T, goalsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindFirstArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends goalsFindFirstArgs>(args?: SelectSubset<T, goalsFindFirstArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Goals that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindFirstOrThrowArgs} args - Arguments to find a Goals
     * @example
     * // Get one Goals
     * const goals = await prisma.goals.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends goalsFindFirstOrThrowArgs>(args?: SelectSubset<T, goalsFindFirstOrThrowArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Goals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Goals
     * const goals = await prisma.goals.findMany()
     * 
     * // Get first 10 Goals
     * const goals = await prisma.goals.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const goalsWithIdOnly = await prisma.goals.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends goalsFindManyArgs>(args?: SelectSubset<T, goalsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Goals.
     * @param {goalsCreateArgs} args - Arguments to create a Goals.
     * @example
     * // Create one Goals
     * const Goals = await prisma.goals.create({
     *   data: {
     *     // ... data to create a Goals
     *   }
     * })
     * 
     */
    create<T extends goalsCreateArgs>(args: SelectSubset<T, goalsCreateArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Goals.
     * @param {goalsCreateManyArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goals = await prisma.goals.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends goalsCreateManyArgs>(args?: SelectSubset<T, goalsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Goals and returns the data saved in the database.
     * @param {goalsCreateManyAndReturnArgs} args - Arguments to create many Goals.
     * @example
     * // Create many Goals
     * const goals = await prisma.goals.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Goals and only return the `id`
     * const goalsWithIdOnly = await prisma.goals.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends goalsCreateManyAndReturnArgs>(args?: SelectSubset<T, goalsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Goals.
     * @param {goalsDeleteArgs} args - Arguments to delete one Goals.
     * @example
     * // Delete one Goals
     * const Goals = await prisma.goals.delete({
     *   where: {
     *     // ... filter to delete one Goals
     *   }
     * })
     * 
     */
    delete<T extends goalsDeleteArgs>(args: SelectSubset<T, goalsDeleteArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Goals.
     * @param {goalsUpdateArgs} args - Arguments to update one Goals.
     * @example
     * // Update one Goals
     * const goals = await prisma.goals.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends goalsUpdateArgs>(args: SelectSubset<T, goalsUpdateArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Goals.
     * @param {goalsDeleteManyArgs} args - Arguments to filter Goals to delete.
     * @example
     * // Delete a few Goals
     * const { count } = await prisma.goals.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends goalsDeleteManyArgs>(args?: SelectSubset<T, goalsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Goals
     * const goals = await prisma.goals.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends goalsUpdateManyArgs>(args: SelectSubset<T, goalsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Goals.
     * @param {goalsUpsertArgs} args - Arguments to update or create a Goals.
     * @example
     * // Update or create a Goals
     * const goals = await prisma.goals.upsert({
     *   create: {
     *     // ... data to create a Goals
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Goals we want to update
     *   }
     * })
     */
    upsert<T extends goalsUpsertArgs>(args: SelectSubset<T, goalsUpsertArgs<ExtArgs>>): Prisma__goalsClient<$Result.GetResult<Prisma.$goalsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsCountArgs} args - Arguments to filter Goals to count.
     * @example
     * // Count the number of Goals
     * const count = await prisma.goals.count({
     *   where: {
     *     // ... the filter for the Goals we want to count
     *   }
     * })
    **/
    count<T extends goalsCountArgs>(
      args?: Subset<T, goalsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GoalsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GoalsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GoalsAggregateArgs>(args: Subset<T, GoalsAggregateArgs>): Prisma.PrismaPromise<GetGoalsAggregateType<T>>

    /**
     * Group by Goals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {goalsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends goalsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: goalsGroupByArgs['orderBy'] }
        : { orderBy?: goalsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, goalsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGoalsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the goals model
   */
  readonly fields: goalsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for goals.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__goalsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends goals$companiesArgs<ExtArgs> = {}>(args?: Subset<T, goals$companiesArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the goals model
   */ 
  interface goalsFieldRefs {
    readonly id: FieldRef<"goals", 'Int'>
    readonly company_id: FieldRef<"goals", 'Int'>
    readonly goal_value: FieldRef<"goals", 'Decimal'>
    readonly description: FieldRef<"goals", 'String'>
    readonly deadline: FieldRef<"goals", 'DateTime'>
    readonly created_at: FieldRef<"goals", 'DateTime'>
    readonly updated_at: FieldRef<"goals", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * goals findUnique
   */
  export type goalsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals findUniqueOrThrow
   */
  export type goalsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals findFirst
   */
  export type goalsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of goals.
     */
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals findFirstOrThrow
   */
  export type goalsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of goals.
     */
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals findMany
   */
  export type goalsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter, which goals to fetch.
     */
    where?: goalsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of goals to fetch.
     */
    orderBy?: goalsOrderByWithRelationInput | goalsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing goals.
     */
    cursor?: goalsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` goals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` goals.
     */
    skip?: number
    distinct?: GoalsScalarFieldEnum | GoalsScalarFieldEnum[]
  }

  /**
   * goals create
   */
  export type goalsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The data needed to create a goals.
     */
    data: XOR<goalsCreateInput, goalsUncheckedCreateInput>
  }

  /**
   * goals createMany
   */
  export type goalsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many goals.
     */
    data: goalsCreateManyInput | goalsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * goals createManyAndReturn
   */
  export type goalsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many goals.
     */
    data: goalsCreateManyInput | goalsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * goals update
   */
  export type goalsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The data needed to update a goals.
     */
    data: XOR<goalsUpdateInput, goalsUncheckedUpdateInput>
    /**
     * Choose, which goals to update.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals updateMany
   */
  export type goalsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update goals.
     */
    data: XOR<goalsUpdateManyMutationInput, goalsUncheckedUpdateManyInput>
    /**
     * Filter which goals to update
     */
    where?: goalsWhereInput
  }

  /**
   * goals upsert
   */
  export type goalsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * The filter to search for the goals to update in case it exists.
     */
    where: goalsWhereUniqueInput
    /**
     * In case the goals found by the `where` argument doesn't exist, create a new goals with this data.
     */
    create: XOR<goalsCreateInput, goalsUncheckedCreateInput>
    /**
     * In case the goals was found with the provided `where` argument, update it with this data.
     */
    update: XOR<goalsUpdateInput, goalsUncheckedUpdateInput>
  }

  /**
   * goals delete
   */
  export type goalsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
    /**
     * Filter which goals to delete.
     */
    where: goalsWhereUniqueInput
  }

  /**
   * goals deleteMany
   */
  export type goalsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which goals to delete
     */
    where?: goalsWhereInput
  }

  /**
   * goals.companies
   */
  export type goals$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    where?: companiesWhereInput
  }

  /**
   * goals without action
   */
  export type goalsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the goals
     */
    select?: goalsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: goalsInclude<ExtArgs> | null
  }


  /**
   * Model transaction_details
   */

  export type AggregateTransaction_details = {
    _count: Transaction_detailsCountAggregateOutputType | null
    _avg: Transaction_detailsAvgAggregateOutputType | null
    _sum: Transaction_detailsSumAggregateOutputType | null
    _min: Transaction_detailsMinAggregateOutputType | null
    _max: Transaction_detailsMaxAggregateOutputType | null
  }

  export type Transaction_detailsAvgAggregateOutputType = {
    id: number | null
    transaction_id: number | null
    detail_value: Decimal | null
  }

  export type Transaction_detailsSumAggregateOutputType = {
    id: number | null
    transaction_id: number | null
    detail_value: Decimal | null
  }

  export type Transaction_detailsMinAggregateOutputType = {
    id: number | null
    transaction_id: number | null
    detail_type: string | null
    detail_value: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Transaction_detailsMaxAggregateOutputType = {
    id: number | null
    transaction_id: number | null
    detail_type: string | null
    detail_value: Decimal | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type Transaction_detailsCountAggregateOutputType = {
    id: number
    transaction_id: number
    detail_type: number
    detail_value: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type Transaction_detailsAvgAggregateInputType = {
    id?: true
    transaction_id?: true
    detail_value?: true
  }

  export type Transaction_detailsSumAggregateInputType = {
    id?: true
    transaction_id?: true
    detail_value?: true
  }

  export type Transaction_detailsMinAggregateInputType = {
    id?: true
    transaction_id?: true
    detail_type?: true
    detail_value?: true
    created_at?: true
    updated_at?: true
  }

  export type Transaction_detailsMaxAggregateInputType = {
    id?: true
    transaction_id?: true
    detail_type?: true
    detail_value?: true
    created_at?: true
    updated_at?: true
  }

  export type Transaction_detailsCountAggregateInputType = {
    id?: true
    transaction_id?: true
    detail_type?: true
    detail_value?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type Transaction_detailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transaction_details to aggregate.
     */
    where?: transaction_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaction_details to fetch.
     */
    orderBy?: transaction_detailsOrderByWithRelationInput | transaction_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transaction_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaction_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaction_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transaction_details
    **/
    _count?: true | Transaction_detailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: Transaction_detailsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: Transaction_detailsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: Transaction_detailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: Transaction_detailsMaxAggregateInputType
  }

  export type GetTransaction_detailsAggregateType<T extends Transaction_detailsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction_details]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction_details[P]>
      : GetScalarType<T[P], AggregateTransaction_details[P]>
  }




  export type transaction_detailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transaction_detailsWhereInput
    orderBy?: transaction_detailsOrderByWithAggregationInput | transaction_detailsOrderByWithAggregationInput[]
    by: Transaction_detailsScalarFieldEnum[] | Transaction_detailsScalarFieldEnum
    having?: transaction_detailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: Transaction_detailsCountAggregateInputType | true
    _avg?: Transaction_detailsAvgAggregateInputType
    _sum?: Transaction_detailsSumAggregateInputType
    _min?: Transaction_detailsMinAggregateInputType
    _max?: Transaction_detailsMaxAggregateInputType
  }

  export type Transaction_detailsGroupByOutputType = {
    id: number
    transaction_id: number | null
    detail_type: string
    detail_value: Decimal
    created_at: Date | null
    updated_at: Date | null
    _count: Transaction_detailsCountAggregateOutputType | null
    _avg: Transaction_detailsAvgAggregateOutputType | null
    _sum: Transaction_detailsSumAggregateOutputType | null
    _min: Transaction_detailsMinAggregateOutputType | null
    _max: Transaction_detailsMaxAggregateOutputType | null
  }

  type GetTransaction_detailsGroupByPayload<T extends transaction_detailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<Transaction_detailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof Transaction_detailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], Transaction_detailsGroupByOutputType[P]>
            : GetScalarType<T[P], Transaction_detailsGroupByOutputType[P]>
        }
      >
    >


  export type transaction_detailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transaction_id?: boolean
    detail_type?: boolean
    detail_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    transactions?: boolean | transaction_details$transactionsArgs<ExtArgs>
  }, ExtArgs["result"]["transaction_details"]>

  export type transaction_detailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transaction_id?: boolean
    detail_type?: boolean
    detail_value?: boolean
    created_at?: boolean
    updated_at?: boolean
    transactions?: boolean | transaction_details$transactionsArgs<ExtArgs>
  }, ExtArgs["result"]["transaction_details"]>

  export type transaction_detailsSelectScalar = {
    id?: boolean
    transaction_id?: boolean
    detail_type?: boolean
    detail_value?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type transaction_detailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | transaction_details$transactionsArgs<ExtArgs>
  }
  export type transaction_detailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | transaction_details$transactionsArgs<ExtArgs>
  }

  export type $transaction_detailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transaction_details"
    objects: {
      transactions: Prisma.$transactionsPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      transaction_id: number | null
      detail_type: string
      detail_value: Prisma.Decimal
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["transaction_details"]>
    composites: {}
  }

  type transaction_detailsGetPayload<S extends boolean | null | undefined | transaction_detailsDefaultArgs> = $Result.GetResult<Prisma.$transaction_detailsPayload, S>

  type transaction_detailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<transaction_detailsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: Transaction_detailsCountAggregateInputType | true
    }

  export interface transaction_detailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transaction_details'], meta: { name: 'transaction_details' } }
    /**
     * Find zero or one Transaction_details that matches the filter.
     * @param {transaction_detailsFindUniqueArgs} args - Arguments to find a Transaction_details
     * @example
     * // Get one Transaction_details
     * const transaction_details = await prisma.transaction_details.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transaction_detailsFindUniqueArgs>(args: SelectSubset<T, transaction_detailsFindUniqueArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transaction_details that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {transaction_detailsFindUniqueOrThrowArgs} args - Arguments to find a Transaction_details
     * @example
     * // Get one Transaction_details
     * const transaction_details = await prisma.transaction_details.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transaction_detailsFindUniqueOrThrowArgs>(args: SelectSubset<T, transaction_detailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transaction_details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaction_detailsFindFirstArgs} args - Arguments to find a Transaction_details
     * @example
     * // Get one Transaction_details
     * const transaction_details = await prisma.transaction_details.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transaction_detailsFindFirstArgs>(args?: SelectSubset<T, transaction_detailsFindFirstArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transaction_details that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaction_detailsFindFirstOrThrowArgs} args - Arguments to find a Transaction_details
     * @example
     * // Get one Transaction_details
     * const transaction_details = await prisma.transaction_details.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transaction_detailsFindFirstOrThrowArgs>(args?: SelectSubset<T, transaction_detailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transaction_details that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaction_detailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transaction_details
     * const transaction_details = await prisma.transaction_details.findMany()
     * 
     * // Get first 10 Transaction_details
     * const transaction_details = await prisma.transaction_details.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transaction_detailsWithIdOnly = await prisma.transaction_details.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transaction_detailsFindManyArgs>(args?: SelectSubset<T, transaction_detailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transaction_details.
     * @param {transaction_detailsCreateArgs} args - Arguments to create a Transaction_details.
     * @example
     * // Create one Transaction_details
     * const Transaction_details = await prisma.transaction_details.create({
     *   data: {
     *     // ... data to create a Transaction_details
     *   }
     * })
     * 
     */
    create<T extends transaction_detailsCreateArgs>(args: SelectSubset<T, transaction_detailsCreateArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transaction_details.
     * @param {transaction_detailsCreateManyArgs} args - Arguments to create many Transaction_details.
     * @example
     * // Create many Transaction_details
     * const transaction_details = await prisma.transaction_details.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transaction_detailsCreateManyArgs>(args?: SelectSubset<T, transaction_detailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transaction_details and returns the data saved in the database.
     * @param {transaction_detailsCreateManyAndReturnArgs} args - Arguments to create many Transaction_details.
     * @example
     * // Create many Transaction_details
     * const transaction_details = await prisma.transaction_details.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transaction_details and only return the `id`
     * const transaction_detailsWithIdOnly = await prisma.transaction_details.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transaction_detailsCreateManyAndReturnArgs>(args?: SelectSubset<T, transaction_detailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transaction_details.
     * @param {transaction_detailsDeleteArgs} args - Arguments to delete one Transaction_details.
     * @example
     * // Delete one Transaction_details
     * const Transaction_details = await prisma.transaction_details.delete({
     *   where: {
     *     // ... filter to delete one Transaction_details
     *   }
     * })
     * 
     */
    delete<T extends transaction_detailsDeleteArgs>(args: SelectSubset<T, transaction_detailsDeleteArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transaction_details.
     * @param {transaction_detailsUpdateArgs} args - Arguments to update one Transaction_details.
     * @example
     * // Update one Transaction_details
     * const transaction_details = await prisma.transaction_details.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transaction_detailsUpdateArgs>(args: SelectSubset<T, transaction_detailsUpdateArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transaction_details.
     * @param {transaction_detailsDeleteManyArgs} args - Arguments to filter Transaction_details to delete.
     * @example
     * // Delete a few Transaction_details
     * const { count } = await prisma.transaction_details.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transaction_detailsDeleteManyArgs>(args?: SelectSubset<T, transaction_detailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transaction_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaction_detailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transaction_details
     * const transaction_details = await prisma.transaction_details.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transaction_detailsUpdateManyArgs>(args: SelectSubset<T, transaction_detailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transaction_details.
     * @param {transaction_detailsUpsertArgs} args - Arguments to update or create a Transaction_details.
     * @example
     * // Update or create a Transaction_details
     * const transaction_details = await prisma.transaction_details.upsert({
     *   create: {
     *     // ... data to create a Transaction_details
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction_details we want to update
     *   }
     * })
     */
    upsert<T extends transaction_detailsUpsertArgs>(args: SelectSubset<T, transaction_detailsUpsertArgs<ExtArgs>>): Prisma__transaction_detailsClient<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transaction_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaction_detailsCountArgs} args - Arguments to filter Transaction_details to count.
     * @example
     * // Count the number of Transaction_details
     * const count = await prisma.transaction_details.count({
     *   where: {
     *     // ... the filter for the Transaction_details we want to count
     *   }
     * })
    **/
    count<T extends transaction_detailsCountArgs>(
      args?: Subset<T, transaction_detailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], Transaction_detailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {Transaction_detailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends Transaction_detailsAggregateArgs>(args: Subset<T, Transaction_detailsAggregateArgs>): Prisma.PrismaPromise<GetTransaction_detailsAggregateType<T>>

    /**
     * Group by Transaction_details.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transaction_detailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transaction_detailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transaction_detailsGroupByArgs['orderBy'] }
        : { orderBy?: transaction_detailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transaction_detailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransaction_detailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transaction_details model
   */
  readonly fields: transaction_detailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transaction_details.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transaction_detailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transactions<T extends transaction_details$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, transaction_details$transactionsArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transaction_details model
   */ 
  interface transaction_detailsFieldRefs {
    readonly id: FieldRef<"transaction_details", 'Int'>
    readonly transaction_id: FieldRef<"transaction_details", 'Int'>
    readonly detail_type: FieldRef<"transaction_details", 'String'>
    readonly detail_value: FieldRef<"transaction_details", 'Decimal'>
    readonly created_at: FieldRef<"transaction_details", 'DateTime'>
    readonly updated_at: FieldRef<"transaction_details", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * transaction_details findUnique
   */
  export type transaction_detailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * Filter, which transaction_details to fetch.
     */
    where: transaction_detailsWhereUniqueInput
  }

  /**
   * transaction_details findUniqueOrThrow
   */
  export type transaction_detailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * Filter, which transaction_details to fetch.
     */
    where: transaction_detailsWhereUniqueInput
  }

  /**
   * transaction_details findFirst
   */
  export type transaction_detailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * Filter, which transaction_details to fetch.
     */
    where?: transaction_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaction_details to fetch.
     */
    orderBy?: transaction_detailsOrderByWithRelationInput | transaction_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transaction_details.
     */
    cursor?: transaction_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaction_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaction_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transaction_details.
     */
    distinct?: Transaction_detailsScalarFieldEnum | Transaction_detailsScalarFieldEnum[]
  }

  /**
   * transaction_details findFirstOrThrow
   */
  export type transaction_detailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * Filter, which transaction_details to fetch.
     */
    where?: transaction_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaction_details to fetch.
     */
    orderBy?: transaction_detailsOrderByWithRelationInput | transaction_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transaction_details.
     */
    cursor?: transaction_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaction_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaction_details.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transaction_details.
     */
    distinct?: Transaction_detailsScalarFieldEnum | Transaction_detailsScalarFieldEnum[]
  }

  /**
   * transaction_details findMany
   */
  export type transaction_detailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * Filter, which transaction_details to fetch.
     */
    where?: transaction_detailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transaction_details to fetch.
     */
    orderBy?: transaction_detailsOrderByWithRelationInput | transaction_detailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transaction_details.
     */
    cursor?: transaction_detailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transaction_details from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transaction_details.
     */
    skip?: number
    distinct?: Transaction_detailsScalarFieldEnum | Transaction_detailsScalarFieldEnum[]
  }

  /**
   * transaction_details create
   */
  export type transaction_detailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * The data needed to create a transaction_details.
     */
    data: XOR<transaction_detailsCreateInput, transaction_detailsUncheckedCreateInput>
  }

  /**
   * transaction_details createMany
   */
  export type transaction_detailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transaction_details.
     */
    data: transaction_detailsCreateManyInput | transaction_detailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transaction_details createManyAndReturn
   */
  export type transaction_detailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many transaction_details.
     */
    data: transaction_detailsCreateManyInput | transaction_detailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * transaction_details update
   */
  export type transaction_detailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * The data needed to update a transaction_details.
     */
    data: XOR<transaction_detailsUpdateInput, transaction_detailsUncheckedUpdateInput>
    /**
     * Choose, which transaction_details to update.
     */
    where: transaction_detailsWhereUniqueInput
  }

  /**
   * transaction_details updateMany
   */
  export type transaction_detailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transaction_details.
     */
    data: XOR<transaction_detailsUpdateManyMutationInput, transaction_detailsUncheckedUpdateManyInput>
    /**
     * Filter which transaction_details to update
     */
    where?: transaction_detailsWhereInput
  }

  /**
   * transaction_details upsert
   */
  export type transaction_detailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * The filter to search for the transaction_details to update in case it exists.
     */
    where: transaction_detailsWhereUniqueInput
    /**
     * In case the transaction_details found by the `where` argument doesn't exist, create a new transaction_details with this data.
     */
    create: XOR<transaction_detailsCreateInput, transaction_detailsUncheckedCreateInput>
    /**
     * In case the transaction_details was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transaction_detailsUpdateInput, transaction_detailsUncheckedUpdateInput>
  }

  /**
   * transaction_details delete
   */
  export type transaction_detailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    /**
     * Filter which transaction_details to delete.
     */
    where: transaction_detailsWhereUniqueInput
  }

  /**
   * transaction_details deleteMany
   */
  export type transaction_detailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transaction_details to delete
     */
    where?: transaction_detailsWhereInput
  }

  /**
   * transaction_details.transactions
   */
  export type transaction_details$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    where?: transactionsWhereInput
  }

  /**
   * transaction_details without action
   */
  export type transaction_detailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
  }


  /**
   * Model transactions
   */

  export type AggregateTransactions = {
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  export type TransactionsAvgAggregateOutputType = {
    id: number | null
    company_id: number | null
    amount: Decimal | null
  }

  export type TransactionsSumAggregateOutputType = {
    id: number | null
    company_id: number | null
    amount: Decimal | null
  }

  export type TransactionsMinAggregateOutputType = {
    id: number | null
    company_id: number | null
    type: string | null
    amount: Decimal | null
    description: string | null
    transaction_date: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TransactionsMaxAggregateOutputType = {
    id: number | null
    company_id: number | null
    type: string | null
    amount: Decimal | null
    description: string | null
    transaction_date: Date | null
    created_at: Date | null
    updated_at: Date | null
  }

  export type TransactionsCountAggregateOutputType = {
    id: number
    company_id: number
    type: number
    amount: number
    description: number
    transaction_date: number
    created_at: number
    updated_at: number
    _all: number
  }


  export type TransactionsAvgAggregateInputType = {
    id?: true
    company_id?: true
    amount?: true
  }

  export type TransactionsSumAggregateInputType = {
    id?: true
    company_id?: true
    amount?: true
  }

  export type TransactionsMinAggregateInputType = {
    id?: true
    company_id?: true
    type?: true
    amount?: true
    description?: true
    transaction_date?: true
    created_at?: true
    updated_at?: true
  }

  export type TransactionsMaxAggregateInputType = {
    id?: true
    company_id?: true
    type?: true
    amount?: true
    description?: true
    transaction_date?: true
    created_at?: true
    updated_at?: true
  }

  export type TransactionsCountAggregateInputType = {
    id?: true
    company_id?: true
    type?: true
    amount?: true
    description?: true
    transaction_date?: true
    created_at?: true
    updated_at?: true
    _all?: true
  }

  export type TransactionsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to aggregate.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned transactions
    **/
    _count?: true | TransactionsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionsMaxAggregateInputType
  }

  export type GetTransactionsAggregateType<T extends TransactionsAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactions]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactions[P]>
      : GetScalarType<T[P], AggregateTransactions[P]>
  }




  export type transactionsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: transactionsWhereInput
    orderBy?: transactionsOrderByWithAggregationInput | transactionsOrderByWithAggregationInput[]
    by: TransactionsScalarFieldEnum[] | TransactionsScalarFieldEnum
    having?: transactionsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionsCountAggregateInputType | true
    _avg?: TransactionsAvgAggregateInputType
    _sum?: TransactionsSumAggregateInputType
    _min?: TransactionsMinAggregateInputType
    _max?: TransactionsMaxAggregateInputType
  }

  export type TransactionsGroupByOutputType = {
    id: number
    company_id: number | null
    type: string
    amount: Decimal
    description: string
    transaction_date: Date
    created_at: Date | null
    updated_at: Date | null
    _count: TransactionsCountAggregateOutputType | null
    _avg: TransactionsAvgAggregateOutputType | null
    _sum: TransactionsSumAggregateOutputType | null
    _min: TransactionsMinAggregateOutputType | null
    _max: TransactionsMaxAggregateOutputType | null
  }

  type GetTransactionsGroupByPayload<T extends transactionsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionsGroupByOutputType[P]>
        }
      >
    >


  export type transactionsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    transaction_date?: boolean
    created_at?: boolean
    updated_at?: boolean
    transaction_details?: boolean | transactions$transaction_detailsArgs<ExtArgs>
    companies?: boolean | transactions$companiesArgs<ExtArgs>
    _count?: boolean | TransactionsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    company_id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    transaction_date?: boolean
    created_at?: boolean
    updated_at?: boolean
    companies?: boolean | transactions$companiesArgs<ExtArgs>
  }, ExtArgs["result"]["transactions"]>

  export type transactionsSelectScalar = {
    id?: boolean
    company_id?: boolean
    type?: boolean
    amount?: boolean
    description?: boolean
    transaction_date?: boolean
    created_at?: boolean
    updated_at?: boolean
  }

  export type transactionsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction_details?: boolean | transactions$transaction_detailsArgs<ExtArgs>
    companies?: boolean | transactions$companiesArgs<ExtArgs>
    _count?: boolean | TransactionsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type transactionsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | transactions$companiesArgs<ExtArgs>
  }

  export type $transactionsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "transactions"
    objects: {
      transaction_details: Prisma.$transaction_detailsPayload<ExtArgs>[]
      companies: Prisma.$companiesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      company_id: number | null
      type: string
      amount: Prisma.Decimal
      description: string
      transaction_date: Date
      created_at: Date | null
      updated_at: Date | null
    }, ExtArgs["result"]["transactions"]>
    composites: {}
  }

  type transactionsGetPayload<S extends boolean | null | undefined | transactionsDefaultArgs> = $Result.GetResult<Prisma.$transactionsPayload, S>

  type transactionsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<transactionsFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TransactionsCountAggregateInputType | true
    }

  export interface transactionsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['transactions'], meta: { name: 'transactions' } }
    /**
     * Find zero or one Transactions that matches the filter.
     * @param {transactionsFindUniqueArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends transactionsFindUniqueArgs>(args: SelectSubset<T, transactionsFindUniqueArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Transactions that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {transactionsFindUniqueOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends transactionsFindUniqueOrThrowArgs>(args: SelectSubset<T, transactionsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends transactionsFindFirstArgs>(args?: SelectSubset<T, transactionsFindFirstArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Transactions that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindFirstOrThrowArgs} args - Arguments to find a Transactions
     * @example
     * // Get one Transactions
     * const transactions = await prisma.transactions.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends transactionsFindFirstOrThrowArgs>(args?: SelectSubset<T, transactionsFindFirstOrThrowArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transactions.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transactions.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionsWithIdOnly = await prisma.transactions.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends transactionsFindManyArgs>(args?: SelectSubset<T, transactionsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Transactions.
     * @param {transactionsCreateArgs} args - Arguments to create a Transactions.
     * @example
     * // Create one Transactions
     * const Transactions = await prisma.transactions.create({
     *   data: {
     *     // ... data to create a Transactions
     *   }
     * })
     * 
     */
    create<T extends transactionsCreateArgs>(args: SelectSubset<T, transactionsCreateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Transactions.
     * @param {transactionsCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends transactionsCreateManyArgs>(args?: SelectSubset<T, transactionsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {transactionsCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transactions = await prisma.transactions.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionsWithIdOnly = await prisma.transactions.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends transactionsCreateManyAndReturnArgs>(args?: SelectSubset<T, transactionsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Transactions.
     * @param {transactionsDeleteArgs} args - Arguments to delete one Transactions.
     * @example
     * // Delete one Transactions
     * const Transactions = await prisma.transactions.delete({
     *   where: {
     *     // ... filter to delete one Transactions
     *   }
     * })
     * 
     */
    delete<T extends transactionsDeleteArgs>(args: SelectSubset<T, transactionsDeleteArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Transactions.
     * @param {transactionsUpdateArgs} args - Arguments to update one Transactions.
     * @example
     * // Update one Transactions
     * const transactions = await prisma.transactions.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends transactionsUpdateArgs>(args: SelectSubset<T, transactionsUpdateArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Transactions.
     * @param {transactionsDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transactions.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends transactionsDeleteManyArgs>(args?: SelectSubset<T, transactionsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transactions = await prisma.transactions.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends transactionsUpdateManyArgs>(args: SelectSubset<T, transactionsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Transactions.
     * @param {transactionsUpsertArgs} args - Arguments to update or create a Transactions.
     * @example
     * // Update or create a Transactions
     * const transactions = await prisma.transactions.upsert({
     *   create: {
     *     // ... data to create a Transactions
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transactions we want to update
     *   }
     * })
     */
    upsert<T extends transactionsUpsertArgs>(args: SelectSubset<T, transactionsUpsertArgs<ExtArgs>>): Prisma__transactionsClient<$Result.GetResult<Prisma.$transactionsPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transactions.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends transactionsCountArgs>(
      args?: Subset<T, transactionsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionsAggregateArgs>(args: Subset<T, TransactionsAggregateArgs>): Prisma.PrismaPromise<GetTransactionsAggregateType<T>>

    /**
     * Group by Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {transactionsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends transactionsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: transactionsGroupByArgs['orderBy'] }
        : { orderBy?: transactionsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, transactionsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the transactions model
   */
  readonly fields: transactionsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for transactions.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__transactionsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transaction_details<T extends transactions$transaction_detailsArgs<ExtArgs> = {}>(args?: Subset<T, transactions$transaction_detailsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$transaction_detailsPayload<ExtArgs>, T, "findMany"> | Null>
    companies<T extends transactions$companiesArgs<ExtArgs> = {}>(args?: Subset<T, transactions$companiesArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the transactions model
   */ 
  interface transactionsFieldRefs {
    readonly id: FieldRef<"transactions", 'Int'>
    readonly company_id: FieldRef<"transactions", 'Int'>
    readonly type: FieldRef<"transactions", 'String'>
    readonly amount: FieldRef<"transactions", 'Decimal'>
    readonly description: FieldRef<"transactions", 'String'>
    readonly transaction_date: FieldRef<"transactions", 'DateTime'>
    readonly created_at: FieldRef<"transactions", 'DateTime'>
    readonly updated_at: FieldRef<"transactions", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * transactions findUnique
   */
  export type transactionsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findUniqueOrThrow
   */
  export type transactionsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions findFirst
   */
  export type transactionsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findFirstOrThrow
   */
  export type transactionsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of transactions.
     */
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions findMany
   */
  export type transactionsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter, which transactions to fetch.
     */
    where?: transactionsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of transactions to fetch.
     */
    orderBy?: transactionsOrderByWithRelationInput | transactionsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing transactions.
     */
    cursor?: transactionsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` transactions.
     */
    skip?: number
    distinct?: TransactionsScalarFieldEnum | TransactionsScalarFieldEnum[]
  }

  /**
   * transactions create
   */
  export type transactionsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to create a transactions.
     */
    data: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
  }

  /**
   * transactions createMany
   */
  export type transactionsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * transactions createManyAndReturn
   */
  export type transactionsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many transactions.
     */
    data: transactionsCreateManyInput | transactionsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * transactions update
   */
  export type transactionsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The data needed to update a transactions.
     */
    data: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
    /**
     * Choose, which transactions to update.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions updateMany
   */
  export type transactionsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update transactions.
     */
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyInput>
    /**
     * Filter which transactions to update
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions upsert
   */
  export type transactionsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * The filter to search for the transactions to update in case it exists.
     */
    where: transactionsWhereUniqueInput
    /**
     * In case the transactions found by the `where` argument doesn't exist, create a new transactions with this data.
     */
    create: XOR<transactionsCreateInput, transactionsUncheckedCreateInput>
    /**
     * In case the transactions was found with the provided `where` argument, update it with this data.
     */
    update: XOR<transactionsUpdateInput, transactionsUncheckedUpdateInput>
  }

  /**
   * transactions delete
   */
  export type transactionsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
    /**
     * Filter which transactions to delete.
     */
    where: transactionsWhereUniqueInput
  }

  /**
   * transactions deleteMany
   */
  export type transactionsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which transactions to delete
     */
    where?: transactionsWhereInput
  }

  /**
   * transactions.transaction_details
   */
  export type transactions$transaction_detailsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transaction_details
     */
    select?: transaction_detailsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transaction_detailsInclude<ExtArgs> | null
    where?: transaction_detailsWhereInput
    orderBy?: transaction_detailsOrderByWithRelationInput | transaction_detailsOrderByWithRelationInput[]
    cursor?: transaction_detailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Transaction_detailsScalarFieldEnum | Transaction_detailsScalarFieldEnum[]
  }

  /**
   * transactions.companies
   */
  export type transactions$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    where?: companiesWhereInput
  }

  /**
   * transactions without action
   */
  export type transactionsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the transactions
     */
    select?: transactionsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: transactionsInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    company_id: number | null
  }

  export type UsersSumAggregateOutputType = {
    company_id: number | null
  }

  export type UsersMinAggregateOutputType = {
    email: string | null
    password: string | null
    role: string | null
    company_id: number | null
    created_at: Date | null
    updated_at: Date | null
    name: string | null
    id: string | null
  }

  export type UsersMaxAggregateOutputType = {
    email: string | null
    password: string | null
    role: string | null
    company_id: number | null
    created_at: Date | null
    updated_at: Date | null
    name: string | null
    id: string | null
  }

  export type UsersCountAggregateOutputType = {
    email: number
    password: number
    role: number
    company_id: number
    created_at: number
    updated_at: number
    name: number
    id: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    company_id?: true
  }

  export type UsersSumAggregateInputType = {
    company_id?: true
  }

  export type UsersMinAggregateInputType = {
    email?: true
    password?: true
    role?: true
    company_id?: true
    created_at?: true
    updated_at?: true
    name?: true
    id?: true
  }

  export type UsersMaxAggregateInputType = {
    email?: true
    password?: true
    role?: true
    company_id?: true
    created_at?: true
    updated_at?: true
    name?: true
    id?: true
  }

  export type UsersCountAggregateInputType = {
    email?: true
    password?: true
    role?: true
    company_id?: true
    created_at?: true
    updated_at?: true
    name?: true
    id?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    email: string
    password: string
    role: string
    company_id: number | null
    created_at: Date | null
    updated_at: Date | null
    name: string
    id: string
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    password?: boolean
    role?: boolean
    company_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    name?: boolean
    id?: boolean
    companies?: boolean | users$companiesArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    email?: boolean
    password?: boolean
    role?: boolean
    company_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    name?: boolean
    id?: boolean
    companies?: boolean | users$companiesArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    email?: boolean
    password?: boolean
    role?: boolean
    company_id?: boolean
    created_at?: boolean
    updated_at?: boolean
    name?: boolean
    id?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | users$companiesArgs<ExtArgs>
  }
  export type usersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    companies?: boolean | users$companiesArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      companies: Prisma.$companiesPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      email: string
      password: string
      role: string
      company_id: number | null
      created_at: Date | null
      updated_at: Date | null
      name: string
      id: string
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `email`
     * const usersWithEmailOnly = await prisma.users.findMany({ select: { email: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {usersCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `email`
     * const usersWithEmailOnly = await prisma.users.createManyAndReturn({ 
     *   select: { email: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usersCreateManyAndReturnArgs>(args?: SelectSubset<T, usersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    companies<T extends users$companiesArgs<ExtArgs> = {}>(args?: Subset<T, users$companiesArgs<ExtArgs>>): Prisma__companiesClient<$Result.GetResult<Prisma.$companiesPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly email: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly role: FieldRef<"users", 'String'>
    readonly company_id: FieldRef<"users", 'Int'>
    readonly created_at: FieldRef<"users", 'DateTime'>
    readonly updated_at: FieldRef<"users", 'DateTime'>
    readonly name: FieldRef<"users", 'String'>
    readonly id: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users createManyAndReturn
   */
  export type usersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.companies
   */
  export type users$companiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the companies
     */
    select?: companiesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: companiesInclude<ExtArgs> | null
    where?: companiesWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CompaniesScalarFieldEnum: {
    id: 'id',
    name: 'name',
    revenue: 'revenue',
    expenses: 'expenses',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type CompaniesScalarFieldEnum = (typeof CompaniesScalarFieldEnum)[keyof typeof CompaniesScalarFieldEnum]


  export const Company_goalsScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    goal_value: 'goal_value',
    description: 'description',
    deadline: 'deadline',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Company_goalsScalarFieldEnum = (typeof Company_goalsScalarFieldEnum)[keyof typeof Company_goalsScalarFieldEnum]


  export const GoalsScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    goal_value: 'goal_value',
    description: 'description',
    deadline: 'deadline',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type GoalsScalarFieldEnum = (typeof GoalsScalarFieldEnum)[keyof typeof GoalsScalarFieldEnum]


  export const Transaction_detailsScalarFieldEnum: {
    id: 'id',
    transaction_id: 'transaction_id',
    detail_type: 'detail_type',
    detail_value: 'detail_value',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type Transaction_detailsScalarFieldEnum = (typeof Transaction_detailsScalarFieldEnum)[keyof typeof Transaction_detailsScalarFieldEnum]


  export const TransactionsScalarFieldEnum: {
    id: 'id',
    company_id: 'company_id',
    type: 'type',
    amount: 'amount',
    description: 'description',
    transaction_date: 'transaction_date',
    created_at: 'created_at',
    updated_at: 'updated_at'
  };

  export type TransactionsScalarFieldEnum = (typeof TransactionsScalarFieldEnum)[keyof typeof TransactionsScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    email: 'email',
    password: 'password',
    role: 'role',
    company_id: 'company_id',
    created_at: 'created_at',
    updated_at: 'updated_at',
    name: 'name',
    id: 'id'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'Decimal[]'
   */
  export type ListDecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type companiesWhereInput = {
    AND?: companiesWhereInput | companiesWhereInput[]
    OR?: companiesWhereInput[]
    NOT?: companiesWhereInput | companiesWhereInput[]
    id?: IntFilter<"companies"> | number
    name?: StringFilter<"companies"> | string
    revenue?: DecimalFilter<"companies"> | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFilter<"companies"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    company_goals?: Company_goalsListRelationFilter
    goals?: GoalsListRelationFilter
    transactions?: TransactionsListRelationFilter
    users?: UsersListRelationFilter
  }

  export type companiesOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    revenue?: SortOrder
    expenses?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    company_goals?: company_goalsOrderByRelationAggregateInput
    goals?: goalsOrderByRelationAggregateInput
    transactions?: transactionsOrderByRelationAggregateInput
    users?: usersOrderByRelationAggregateInput
  }

  export type companiesWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: companiesWhereInput | companiesWhereInput[]
    OR?: companiesWhereInput[]
    NOT?: companiesWhereInput | companiesWhereInput[]
    name?: StringFilter<"companies"> | string
    revenue?: DecimalFilter<"companies"> | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFilter<"companies"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"companies"> | Date | string | null
    company_goals?: Company_goalsListRelationFilter
    goals?: GoalsListRelationFilter
    transactions?: TransactionsListRelationFilter
    users?: UsersListRelationFilter
  }, "id">

  export type companiesOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    revenue?: SortOrder
    expenses?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: companiesCountOrderByAggregateInput
    _avg?: companiesAvgOrderByAggregateInput
    _max?: companiesMaxOrderByAggregateInput
    _min?: companiesMinOrderByAggregateInput
    _sum?: companiesSumOrderByAggregateInput
  }

  export type companiesScalarWhereWithAggregatesInput = {
    AND?: companiesScalarWhereWithAggregatesInput | companiesScalarWhereWithAggregatesInput[]
    OR?: companiesScalarWhereWithAggregatesInput[]
    NOT?: companiesScalarWhereWithAggregatesInput | companiesScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"companies"> | number
    name?: StringWithAggregatesFilter<"companies"> | string
    revenue?: DecimalWithAggregatesFilter<"companies"> | Decimal | DecimalJsLike | number | string
    expenses?: DecimalWithAggregatesFilter<"companies"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableWithAggregatesFilter<"companies"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"companies"> | Date | string | null
  }

  export type company_goalsWhereInput = {
    AND?: company_goalsWhereInput | company_goalsWhereInput[]
    OR?: company_goalsWhereInput[]
    NOT?: company_goalsWhereInput | company_goalsWhereInput[]
    id?: IntFilter<"company_goals"> | number
    company_id?: IntNullableFilter<"company_goals"> | number | null
    goal_value?: DecimalFilter<"company_goals"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"company_goals"> | string
    deadline?: DateTimeFilter<"company_goals"> | Date | string
    created_at?: DateTimeNullableFilter<"company_goals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"company_goals"> | Date | string | null
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }

  export type company_goalsOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrderInput | SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    companies?: companiesOrderByWithRelationInput
  }

  export type company_goalsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: company_goalsWhereInput | company_goalsWhereInput[]
    OR?: company_goalsWhereInput[]
    NOT?: company_goalsWhereInput | company_goalsWhereInput[]
    company_id?: IntNullableFilter<"company_goals"> | number | null
    goal_value?: DecimalFilter<"company_goals"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"company_goals"> | string
    deadline?: DateTimeFilter<"company_goals"> | Date | string
    created_at?: DateTimeNullableFilter<"company_goals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"company_goals"> | Date | string | null
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }, "id">

  export type company_goalsOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrderInput | SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: company_goalsCountOrderByAggregateInput
    _avg?: company_goalsAvgOrderByAggregateInput
    _max?: company_goalsMaxOrderByAggregateInput
    _min?: company_goalsMinOrderByAggregateInput
    _sum?: company_goalsSumOrderByAggregateInput
  }

  export type company_goalsScalarWhereWithAggregatesInput = {
    AND?: company_goalsScalarWhereWithAggregatesInput | company_goalsScalarWhereWithAggregatesInput[]
    OR?: company_goalsScalarWhereWithAggregatesInput[]
    NOT?: company_goalsScalarWhereWithAggregatesInput | company_goalsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"company_goals"> | number
    company_id?: IntNullableWithAggregatesFilter<"company_goals"> | number | null
    goal_value?: DecimalWithAggregatesFilter<"company_goals"> | Decimal | DecimalJsLike | number | string
    description?: StringWithAggregatesFilter<"company_goals"> | string
    deadline?: DateTimeWithAggregatesFilter<"company_goals"> | Date | string
    created_at?: DateTimeNullableWithAggregatesFilter<"company_goals"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"company_goals"> | Date | string | null
  }

  export type goalsWhereInput = {
    AND?: goalsWhereInput | goalsWhereInput[]
    OR?: goalsWhereInput[]
    NOT?: goalsWhereInput | goalsWhereInput[]
    id?: IntFilter<"goals"> | number
    company_id?: IntNullableFilter<"goals"> | number | null
    goal_value?: DecimalFilter<"goals"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"goals"> | string
    deadline?: DateTimeFilter<"goals"> | Date | string
    created_at?: DateTimeNullableFilter<"goals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"goals"> | Date | string | null
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }

  export type goalsOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrderInput | SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    companies?: companiesOrderByWithRelationInput
  }

  export type goalsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: goalsWhereInput | goalsWhereInput[]
    OR?: goalsWhereInput[]
    NOT?: goalsWhereInput | goalsWhereInput[]
    company_id?: IntNullableFilter<"goals"> | number | null
    goal_value?: DecimalFilter<"goals"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"goals"> | string
    deadline?: DateTimeFilter<"goals"> | Date | string
    created_at?: DateTimeNullableFilter<"goals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"goals"> | Date | string | null
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }, "id">

  export type goalsOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrderInput | SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: goalsCountOrderByAggregateInput
    _avg?: goalsAvgOrderByAggregateInput
    _max?: goalsMaxOrderByAggregateInput
    _min?: goalsMinOrderByAggregateInput
    _sum?: goalsSumOrderByAggregateInput
  }

  export type goalsScalarWhereWithAggregatesInput = {
    AND?: goalsScalarWhereWithAggregatesInput | goalsScalarWhereWithAggregatesInput[]
    OR?: goalsScalarWhereWithAggregatesInput[]
    NOT?: goalsScalarWhereWithAggregatesInput | goalsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"goals"> | number
    company_id?: IntNullableWithAggregatesFilter<"goals"> | number | null
    goal_value?: DecimalWithAggregatesFilter<"goals"> | Decimal | DecimalJsLike | number | string
    description?: StringWithAggregatesFilter<"goals"> | string
    deadline?: DateTimeWithAggregatesFilter<"goals"> | Date | string
    created_at?: DateTimeNullableWithAggregatesFilter<"goals"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"goals"> | Date | string | null
  }

  export type transaction_detailsWhereInput = {
    AND?: transaction_detailsWhereInput | transaction_detailsWhereInput[]
    OR?: transaction_detailsWhereInput[]
    NOT?: transaction_detailsWhereInput | transaction_detailsWhereInput[]
    id?: IntFilter<"transaction_details"> | number
    transaction_id?: IntNullableFilter<"transaction_details"> | number | null
    detail_type?: StringFilter<"transaction_details"> | string
    detail_value?: DecimalFilter<"transaction_details"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"transaction_details"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transaction_details"> | Date | string | null
    transactions?: XOR<TransactionsNullableScalarRelationFilter, transactionsWhereInput> | null
  }

  export type transaction_detailsOrderByWithRelationInput = {
    id?: SortOrder
    transaction_id?: SortOrderInput | SortOrder
    detail_type?: SortOrder
    detail_value?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    transactions?: transactionsOrderByWithRelationInput
  }

  export type transaction_detailsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: transaction_detailsWhereInput | transaction_detailsWhereInput[]
    OR?: transaction_detailsWhereInput[]
    NOT?: transaction_detailsWhereInput | transaction_detailsWhereInput[]
    transaction_id?: IntNullableFilter<"transaction_details"> | number | null
    detail_type?: StringFilter<"transaction_details"> | string
    detail_value?: DecimalFilter<"transaction_details"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"transaction_details"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transaction_details"> | Date | string | null
    transactions?: XOR<TransactionsNullableScalarRelationFilter, transactionsWhereInput> | null
  }, "id">

  export type transaction_detailsOrderByWithAggregationInput = {
    id?: SortOrder
    transaction_id?: SortOrderInput | SortOrder
    detail_type?: SortOrder
    detail_value?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: transaction_detailsCountOrderByAggregateInput
    _avg?: transaction_detailsAvgOrderByAggregateInput
    _max?: transaction_detailsMaxOrderByAggregateInput
    _min?: transaction_detailsMinOrderByAggregateInput
    _sum?: transaction_detailsSumOrderByAggregateInput
  }

  export type transaction_detailsScalarWhereWithAggregatesInput = {
    AND?: transaction_detailsScalarWhereWithAggregatesInput | transaction_detailsScalarWhereWithAggregatesInput[]
    OR?: transaction_detailsScalarWhereWithAggregatesInput[]
    NOT?: transaction_detailsScalarWhereWithAggregatesInput | transaction_detailsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"transaction_details"> | number
    transaction_id?: IntNullableWithAggregatesFilter<"transaction_details"> | number | null
    detail_type?: StringWithAggregatesFilter<"transaction_details"> | string
    detail_value?: DecimalWithAggregatesFilter<"transaction_details"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableWithAggregatesFilter<"transaction_details"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"transaction_details"> | Date | string | null
  }

  export type transactionsWhereInput = {
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    id?: IntFilter<"transactions"> | number
    company_id?: IntNullableFilter<"transactions"> | number | null
    type?: StringFilter<"transactions"> | string
    amount?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"transactions"> | string
    transaction_date?: DateTimeFilter<"transactions"> | Date | string
    created_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    transaction_details?: Transaction_detailsListRelationFilter
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }

  export type transactionsOrderByWithRelationInput = {
    id?: SortOrder
    company_id?: SortOrderInput | SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    transaction_date?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    transaction_details?: transaction_detailsOrderByRelationAggregateInput
    companies?: companiesOrderByWithRelationInput
  }

  export type transactionsWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: transactionsWhereInput | transactionsWhereInput[]
    OR?: transactionsWhereInput[]
    NOT?: transactionsWhereInput | transactionsWhereInput[]
    company_id?: IntNullableFilter<"transactions"> | number | null
    type?: StringFilter<"transactions"> | string
    amount?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"transactions"> | string
    transaction_date?: DateTimeFilter<"transactions"> | Date | string
    created_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    transaction_details?: Transaction_detailsListRelationFilter
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }, "id">

  export type transactionsOrderByWithAggregationInput = {
    id?: SortOrder
    company_id?: SortOrderInput | SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    transaction_date?: SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    _count?: transactionsCountOrderByAggregateInput
    _avg?: transactionsAvgOrderByAggregateInput
    _max?: transactionsMaxOrderByAggregateInput
    _min?: transactionsMinOrderByAggregateInput
    _sum?: transactionsSumOrderByAggregateInput
  }

  export type transactionsScalarWhereWithAggregatesInput = {
    AND?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    OR?: transactionsScalarWhereWithAggregatesInput[]
    NOT?: transactionsScalarWhereWithAggregatesInput | transactionsScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"transactions"> | number
    company_id?: IntNullableWithAggregatesFilter<"transactions"> | number | null
    type?: StringWithAggregatesFilter<"transactions"> | string
    amount?: DecimalWithAggregatesFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    description?: StringWithAggregatesFilter<"transactions"> | string
    transaction_date?: DateTimeWithAggregatesFilter<"transactions"> | Date | string
    created_at?: DateTimeNullableWithAggregatesFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"transactions"> | Date | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    company_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    name?: StringFilter<"users"> | string
    id?: UuidFilter<"users"> | string
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    company_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    name?: SortOrder
    id?: SortOrder
    companies?: companiesOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    email?: string
    id?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    company_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    name?: StringFilter<"users"> | string
    companies?: XOR<CompaniesNullableScalarRelationFilter, companiesWhereInput> | null
  }, "id" | "email" | "id">

  export type usersOrderByWithAggregationInput = {
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    company_id?: SortOrderInput | SortOrder
    created_at?: SortOrderInput | SortOrder
    updated_at?: SortOrderInput | SortOrder
    name?: SortOrder
    id?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    email?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    role?: StringWithAggregatesFilter<"users"> | string
    company_id?: IntNullableWithAggregatesFilter<"users"> | number | null
    created_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableWithAggregatesFilter<"users"> | Date | string | null
    name?: StringWithAggregatesFilter<"users"> | string
    id?: UuidWithAggregatesFilter<"users"> | string
  }

  export type companiesCreateInput = {
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsCreateNestedManyWithoutCompaniesInput
    goals?: goalsCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsCreateNestedManyWithoutCompaniesInput
    users?: usersCreateNestedManyWithoutCompaniesInput
  }

  export type companiesUncheckedCreateInput = {
    id?: number
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsUncheckedCreateNestedManyWithoutCompaniesInput
    goals?: goalsUncheckedCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutCompaniesInput
    users?: usersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type companiesUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUpdateManyWithoutCompaniesNestedInput
    goals?: goalsUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUpdateManyWithoutCompaniesNestedInput
    users?: usersUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    goals?: goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: usersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesCreateManyInput = {
    id?: number
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type companiesUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type companiesUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type company_goalsCreateInput = {
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateNestedOneWithoutCompany_goalsInput
  }

  export type company_goalsUncheckedCreateInput = {
    id?: number
    company_id?: number | null
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type company_goalsUpdateInput = {
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutCompany_goalsNestedInput
  }

  export type company_goalsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type company_goalsCreateManyInput = {
    id?: number
    company_id?: number | null
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type company_goalsUpdateManyMutationInput = {
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type company_goalsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsCreateInput = {
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateNestedOneWithoutGoalsInput
  }

  export type goalsUncheckedCreateInput = {
    id?: number
    company_id?: number | null
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type goalsUpdateInput = {
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutGoalsNestedInput
  }

  export type goalsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsCreateManyInput = {
    id?: number
    company_id?: number | null
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type goalsUpdateManyMutationInput = {
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transaction_detailsCreateInput = {
    detail_type: string
    detail_value: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transactions?: transactionsCreateNestedOneWithoutTransaction_detailsInput
  }

  export type transaction_detailsUncheckedCreateInput = {
    id?: number
    transaction_id?: number | null
    detail_type: string
    detail_value: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transaction_detailsUpdateInput = {
    detail_type?: StringFieldUpdateOperationsInput | string
    detail_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transactions?: transactionsUpdateOneWithoutTransaction_detailsNestedInput
  }

  export type transaction_detailsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    transaction_id?: NullableIntFieldUpdateOperationsInput | number | null
    detail_type?: StringFieldUpdateOperationsInput | string
    detail_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transaction_detailsCreateManyInput = {
    id?: number
    transaction_id?: number | null
    detail_type: string
    detail_value: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transaction_detailsUpdateManyMutationInput = {
    detail_type?: StringFieldUpdateOperationsInput | string
    detail_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transaction_detailsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    transaction_id?: NullableIntFieldUpdateOperationsInput | number | null
    detail_type?: StringFieldUpdateOperationsInput | string
    detail_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsCreateInput = {
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transaction_details?: transaction_detailsCreateNestedManyWithoutTransactionsInput
    companies?: companiesCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateInput = {
    id?: number
    company_id?: number | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transaction_details?: transaction_detailsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactionsUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_details?: transaction_detailsUpdateManyWithoutTransactionsNestedInput
    companies?: companiesUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_details?: transaction_detailsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactionsCreateManyInput = {
    id?: number
    company_id?: number | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transactionsUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersCreateInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name: string
    id?: string
    companies?: companiesCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    email: string
    password: string
    role: string
    company_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name: string
    id?: string
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
    companies?: companiesUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type usersCreateManyInput = {
    email: string
    password: string
    role: string
    company_id?: number | null
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name: string
    id?: string
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type Company_goalsListRelationFilter = {
    every?: company_goalsWhereInput
    some?: company_goalsWhereInput
    none?: company_goalsWhereInput
  }

  export type GoalsListRelationFilter = {
    every?: goalsWhereInput
    some?: goalsWhereInput
    none?: goalsWhereInput
  }

  export type TransactionsListRelationFilter = {
    every?: transactionsWhereInput
    some?: transactionsWhereInput
    none?: transactionsWhereInput
  }

  export type UsersListRelationFilter = {
    every?: usersWhereInput
    some?: usersWhereInput
    none?: usersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type company_goalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type goalsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transactionsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type companiesCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    revenue?: SortOrder
    expenses?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type companiesAvgOrderByAggregateInput = {
    id?: SortOrder
    revenue?: SortOrder
    expenses?: SortOrder
  }

  export type companiesMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    revenue?: SortOrder
    expenses?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type companiesMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    revenue?: SortOrder
    expenses?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type companiesSumOrderByAggregateInput = {
    id?: SortOrder
    revenue?: SortOrder
    expenses?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type CompaniesNullableScalarRelationFilter = {
    is?: companiesWhereInput | null
    isNot?: companiesWhereInput | null
  }

  export type company_goalsCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type company_goalsAvgOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
  }

  export type company_goalsMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type company_goalsMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type company_goalsSumOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type goalsCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type goalsAvgOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
  }

  export type goalsMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type goalsMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
    description?: SortOrder
    deadline?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type goalsSumOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    goal_value?: SortOrder
  }

  export type TransactionsNullableScalarRelationFilter = {
    is?: transactionsWhereInput | null
    isNot?: transactionsWhereInput | null
  }

  export type transaction_detailsCountOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    detail_type?: SortOrder
    detail_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type transaction_detailsAvgOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    detail_value?: SortOrder
  }

  export type transaction_detailsMaxOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    detail_type?: SortOrder
    detail_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type transaction_detailsMinOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    detail_type?: SortOrder
    detail_value?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type transaction_detailsSumOrderByAggregateInput = {
    id?: SortOrder
    transaction_id?: SortOrder
    detail_value?: SortOrder
  }

  export type Transaction_detailsListRelationFilter = {
    every?: transaction_detailsWhereInput
    some?: transaction_detailsWhereInput
    none?: transaction_detailsWhereInput
  }

  export type transaction_detailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type transactionsCountOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    transaction_date?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type transactionsAvgOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    amount?: SortOrder
  }

  export type transactionsMaxOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    transaction_date?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type transactionsMinOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    type?: SortOrder
    amount?: SortOrder
    description?: SortOrder
    transaction_date?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
  }

  export type transactionsSumOrderByAggregateInput = {
    id?: SortOrder
    company_id?: SortOrder
    amount?: SortOrder
  }

  export type UuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type usersCountOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    company_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrder
    id?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    company_id?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    company_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrder
    id?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    email?: SortOrder
    password?: SortOrder
    role?: SortOrder
    company_id?: SortOrder
    created_at?: SortOrder
    updated_at?: SortOrder
    name?: SortOrder
    id?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    company_id?: SortOrder
  }

  export type UuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type company_goalsCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<company_goalsCreateWithoutCompaniesInput, company_goalsUncheckedCreateWithoutCompaniesInput> | company_goalsCreateWithoutCompaniesInput[] | company_goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: company_goalsCreateOrConnectWithoutCompaniesInput | company_goalsCreateOrConnectWithoutCompaniesInput[]
    createMany?: company_goalsCreateManyCompaniesInputEnvelope
    connect?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
  }

  export type goalsCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<goalsCreateWithoutCompaniesInput, goalsUncheckedCreateWithoutCompaniesInput> | goalsCreateWithoutCompaniesInput[] | goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutCompaniesInput | goalsCreateOrConnectWithoutCompaniesInput[]
    createMany?: goalsCreateManyCompaniesInputEnvelope
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
  }

  export type transactionsCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<transactionsCreateWithoutCompaniesInput, transactionsUncheckedCreateWithoutCompaniesInput> | transactionsCreateWithoutCompaniesInput[] | transactionsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCompaniesInput | transactionsCreateOrConnectWithoutCompaniesInput[]
    createMany?: transactionsCreateManyCompaniesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type usersCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput> | usersCreateWithoutCompaniesInput[] | usersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompaniesInput | usersCreateOrConnectWithoutCompaniesInput[]
    createMany?: usersCreateManyCompaniesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type company_goalsUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<company_goalsCreateWithoutCompaniesInput, company_goalsUncheckedCreateWithoutCompaniesInput> | company_goalsCreateWithoutCompaniesInput[] | company_goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: company_goalsCreateOrConnectWithoutCompaniesInput | company_goalsCreateOrConnectWithoutCompaniesInput[]
    createMany?: company_goalsCreateManyCompaniesInputEnvelope
    connect?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
  }

  export type goalsUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<goalsCreateWithoutCompaniesInput, goalsUncheckedCreateWithoutCompaniesInput> | goalsCreateWithoutCompaniesInput[] | goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutCompaniesInput | goalsCreateOrConnectWithoutCompaniesInput[]
    createMany?: goalsCreateManyCompaniesInputEnvelope
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
  }

  export type transactionsUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<transactionsCreateWithoutCompaniesInput, transactionsUncheckedCreateWithoutCompaniesInput> | transactionsCreateWithoutCompaniesInput[] | transactionsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCompaniesInput | transactionsCreateOrConnectWithoutCompaniesInput[]
    createMany?: transactionsCreateManyCompaniesInputEnvelope
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
  }

  export type usersUncheckedCreateNestedManyWithoutCompaniesInput = {
    create?: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput> | usersCreateWithoutCompaniesInput[] | usersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompaniesInput | usersCreateOrConnectWithoutCompaniesInput[]
    createMany?: usersCreateManyCompaniesInputEnvelope
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type company_goalsUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<company_goalsCreateWithoutCompaniesInput, company_goalsUncheckedCreateWithoutCompaniesInput> | company_goalsCreateWithoutCompaniesInput[] | company_goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: company_goalsCreateOrConnectWithoutCompaniesInput | company_goalsCreateOrConnectWithoutCompaniesInput[]
    upsert?: company_goalsUpsertWithWhereUniqueWithoutCompaniesInput | company_goalsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: company_goalsCreateManyCompaniesInputEnvelope
    set?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    disconnect?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    delete?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    connect?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    update?: company_goalsUpdateWithWhereUniqueWithoutCompaniesInput | company_goalsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: company_goalsUpdateManyWithWhereWithoutCompaniesInput | company_goalsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: company_goalsScalarWhereInput | company_goalsScalarWhereInput[]
  }

  export type goalsUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<goalsCreateWithoutCompaniesInput, goalsUncheckedCreateWithoutCompaniesInput> | goalsCreateWithoutCompaniesInput[] | goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutCompaniesInput | goalsCreateOrConnectWithoutCompaniesInput[]
    upsert?: goalsUpsertWithWhereUniqueWithoutCompaniesInput | goalsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: goalsCreateManyCompaniesInputEnvelope
    set?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    disconnect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    delete?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    update?: goalsUpdateWithWhereUniqueWithoutCompaniesInput | goalsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: goalsUpdateManyWithWhereWithoutCompaniesInput | goalsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: goalsScalarWhereInput | goalsScalarWhereInput[]
  }

  export type transactionsUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<transactionsCreateWithoutCompaniesInput, transactionsUncheckedCreateWithoutCompaniesInput> | transactionsCreateWithoutCompaniesInput[] | transactionsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCompaniesInput | transactionsCreateOrConnectWithoutCompaniesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutCompaniesInput | transactionsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: transactionsCreateManyCompaniesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutCompaniesInput | transactionsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutCompaniesInput | transactionsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type usersUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput> | usersCreateWithoutCompaniesInput[] | usersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompaniesInput | usersCreateOrConnectWithoutCompaniesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutCompaniesInput | usersUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: usersCreateManyCompaniesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutCompaniesInput | usersUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutCompaniesInput | usersUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type company_goalsUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<company_goalsCreateWithoutCompaniesInput, company_goalsUncheckedCreateWithoutCompaniesInput> | company_goalsCreateWithoutCompaniesInput[] | company_goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: company_goalsCreateOrConnectWithoutCompaniesInput | company_goalsCreateOrConnectWithoutCompaniesInput[]
    upsert?: company_goalsUpsertWithWhereUniqueWithoutCompaniesInput | company_goalsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: company_goalsCreateManyCompaniesInputEnvelope
    set?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    disconnect?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    delete?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    connect?: company_goalsWhereUniqueInput | company_goalsWhereUniqueInput[]
    update?: company_goalsUpdateWithWhereUniqueWithoutCompaniesInput | company_goalsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: company_goalsUpdateManyWithWhereWithoutCompaniesInput | company_goalsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: company_goalsScalarWhereInput | company_goalsScalarWhereInput[]
  }

  export type goalsUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<goalsCreateWithoutCompaniesInput, goalsUncheckedCreateWithoutCompaniesInput> | goalsCreateWithoutCompaniesInput[] | goalsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: goalsCreateOrConnectWithoutCompaniesInput | goalsCreateOrConnectWithoutCompaniesInput[]
    upsert?: goalsUpsertWithWhereUniqueWithoutCompaniesInput | goalsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: goalsCreateManyCompaniesInputEnvelope
    set?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    disconnect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    delete?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    connect?: goalsWhereUniqueInput | goalsWhereUniqueInput[]
    update?: goalsUpdateWithWhereUniqueWithoutCompaniesInput | goalsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: goalsUpdateManyWithWhereWithoutCompaniesInput | goalsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: goalsScalarWhereInput | goalsScalarWhereInput[]
  }

  export type transactionsUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<transactionsCreateWithoutCompaniesInput, transactionsUncheckedCreateWithoutCompaniesInput> | transactionsCreateWithoutCompaniesInput[] | transactionsUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: transactionsCreateOrConnectWithoutCompaniesInput | transactionsCreateOrConnectWithoutCompaniesInput[]
    upsert?: transactionsUpsertWithWhereUniqueWithoutCompaniesInput | transactionsUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: transactionsCreateManyCompaniesInputEnvelope
    set?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    disconnect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    delete?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    connect?: transactionsWhereUniqueInput | transactionsWhereUniqueInput[]
    update?: transactionsUpdateWithWhereUniqueWithoutCompaniesInput | transactionsUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: transactionsUpdateManyWithWhereWithoutCompaniesInput | transactionsUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
  }

  export type usersUncheckedUpdateManyWithoutCompaniesNestedInput = {
    create?: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput> | usersCreateWithoutCompaniesInput[] | usersUncheckedCreateWithoutCompaniesInput[]
    connectOrCreate?: usersCreateOrConnectWithoutCompaniesInput | usersCreateOrConnectWithoutCompaniesInput[]
    upsert?: usersUpsertWithWhereUniqueWithoutCompaniesInput | usersUpsertWithWhereUniqueWithoutCompaniesInput[]
    createMany?: usersCreateManyCompaniesInputEnvelope
    set?: usersWhereUniqueInput | usersWhereUniqueInput[]
    disconnect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    delete?: usersWhereUniqueInput | usersWhereUniqueInput[]
    connect?: usersWhereUniqueInput | usersWhereUniqueInput[]
    update?: usersUpdateWithWhereUniqueWithoutCompaniesInput | usersUpdateWithWhereUniqueWithoutCompaniesInput[]
    updateMany?: usersUpdateManyWithWhereWithoutCompaniesInput | usersUpdateManyWithWhereWithoutCompaniesInput[]
    deleteMany?: usersScalarWhereInput | usersScalarWhereInput[]
  }

  export type companiesCreateNestedOneWithoutCompany_goalsInput = {
    create?: XOR<companiesCreateWithoutCompany_goalsInput, companiesUncheckedCreateWithoutCompany_goalsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutCompany_goalsInput
    connect?: companiesWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type companiesUpdateOneWithoutCompany_goalsNestedInput = {
    create?: XOR<companiesCreateWithoutCompany_goalsInput, companiesUncheckedCreateWithoutCompany_goalsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutCompany_goalsInput
    upsert?: companiesUpsertWithoutCompany_goalsInput
    disconnect?: companiesWhereInput | boolean
    delete?: companiesWhereInput | boolean
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutCompany_goalsInput, companiesUpdateWithoutCompany_goalsInput>, companiesUncheckedUpdateWithoutCompany_goalsInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type companiesCreateNestedOneWithoutGoalsInput = {
    create?: XOR<companiesCreateWithoutGoalsInput, companiesUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutGoalsInput
    connect?: companiesWhereUniqueInput
  }

  export type companiesUpdateOneWithoutGoalsNestedInput = {
    create?: XOR<companiesCreateWithoutGoalsInput, companiesUncheckedCreateWithoutGoalsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutGoalsInput
    upsert?: companiesUpsertWithoutGoalsInput
    disconnect?: companiesWhereInput | boolean
    delete?: companiesWhereInput | boolean
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutGoalsInput, companiesUpdateWithoutGoalsInput>, companiesUncheckedUpdateWithoutGoalsInput>
  }

  export type transactionsCreateNestedOneWithoutTransaction_detailsInput = {
    create?: XOR<transactionsCreateWithoutTransaction_detailsInput, transactionsUncheckedCreateWithoutTransaction_detailsInput>
    connectOrCreate?: transactionsCreateOrConnectWithoutTransaction_detailsInput
    connect?: transactionsWhereUniqueInput
  }

  export type transactionsUpdateOneWithoutTransaction_detailsNestedInput = {
    create?: XOR<transactionsCreateWithoutTransaction_detailsInput, transactionsUncheckedCreateWithoutTransaction_detailsInput>
    connectOrCreate?: transactionsCreateOrConnectWithoutTransaction_detailsInput
    upsert?: transactionsUpsertWithoutTransaction_detailsInput
    disconnect?: transactionsWhereInput | boolean
    delete?: transactionsWhereInput | boolean
    connect?: transactionsWhereUniqueInput
    update?: XOR<XOR<transactionsUpdateToOneWithWhereWithoutTransaction_detailsInput, transactionsUpdateWithoutTransaction_detailsInput>, transactionsUncheckedUpdateWithoutTransaction_detailsInput>
  }

  export type transaction_detailsCreateNestedManyWithoutTransactionsInput = {
    create?: XOR<transaction_detailsCreateWithoutTransactionsInput, transaction_detailsUncheckedCreateWithoutTransactionsInput> | transaction_detailsCreateWithoutTransactionsInput[] | transaction_detailsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: transaction_detailsCreateOrConnectWithoutTransactionsInput | transaction_detailsCreateOrConnectWithoutTransactionsInput[]
    createMany?: transaction_detailsCreateManyTransactionsInputEnvelope
    connect?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
  }

  export type companiesCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<companiesCreateWithoutTransactionsInput, companiesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutTransactionsInput
    connect?: companiesWhereUniqueInput
  }

  export type transaction_detailsUncheckedCreateNestedManyWithoutTransactionsInput = {
    create?: XOR<transaction_detailsCreateWithoutTransactionsInput, transaction_detailsUncheckedCreateWithoutTransactionsInput> | transaction_detailsCreateWithoutTransactionsInput[] | transaction_detailsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: transaction_detailsCreateOrConnectWithoutTransactionsInput | transaction_detailsCreateOrConnectWithoutTransactionsInput[]
    createMany?: transaction_detailsCreateManyTransactionsInputEnvelope
    connect?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
  }

  export type transaction_detailsUpdateManyWithoutTransactionsNestedInput = {
    create?: XOR<transaction_detailsCreateWithoutTransactionsInput, transaction_detailsUncheckedCreateWithoutTransactionsInput> | transaction_detailsCreateWithoutTransactionsInput[] | transaction_detailsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: transaction_detailsCreateOrConnectWithoutTransactionsInput | transaction_detailsCreateOrConnectWithoutTransactionsInput[]
    upsert?: transaction_detailsUpsertWithWhereUniqueWithoutTransactionsInput | transaction_detailsUpsertWithWhereUniqueWithoutTransactionsInput[]
    createMany?: transaction_detailsCreateManyTransactionsInputEnvelope
    set?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    disconnect?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    delete?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    connect?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    update?: transaction_detailsUpdateWithWhereUniqueWithoutTransactionsInput | transaction_detailsUpdateWithWhereUniqueWithoutTransactionsInput[]
    updateMany?: transaction_detailsUpdateManyWithWhereWithoutTransactionsInput | transaction_detailsUpdateManyWithWhereWithoutTransactionsInput[]
    deleteMany?: transaction_detailsScalarWhereInput | transaction_detailsScalarWhereInput[]
  }

  export type companiesUpdateOneWithoutTransactionsNestedInput = {
    create?: XOR<companiesCreateWithoutTransactionsInput, companiesUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: companiesCreateOrConnectWithoutTransactionsInput
    upsert?: companiesUpsertWithoutTransactionsInput
    disconnect?: companiesWhereInput | boolean
    delete?: companiesWhereInput | boolean
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutTransactionsInput, companiesUpdateWithoutTransactionsInput>, companiesUncheckedUpdateWithoutTransactionsInput>
  }

  export type transaction_detailsUncheckedUpdateManyWithoutTransactionsNestedInput = {
    create?: XOR<transaction_detailsCreateWithoutTransactionsInput, transaction_detailsUncheckedCreateWithoutTransactionsInput> | transaction_detailsCreateWithoutTransactionsInput[] | transaction_detailsUncheckedCreateWithoutTransactionsInput[]
    connectOrCreate?: transaction_detailsCreateOrConnectWithoutTransactionsInput | transaction_detailsCreateOrConnectWithoutTransactionsInput[]
    upsert?: transaction_detailsUpsertWithWhereUniqueWithoutTransactionsInput | transaction_detailsUpsertWithWhereUniqueWithoutTransactionsInput[]
    createMany?: transaction_detailsCreateManyTransactionsInputEnvelope
    set?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    disconnect?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    delete?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    connect?: transaction_detailsWhereUniqueInput | transaction_detailsWhereUniqueInput[]
    update?: transaction_detailsUpdateWithWhereUniqueWithoutTransactionsInput | transaction_detailsUpdateWithWhereUniqueWithoutTransactionsInput[]
    updateMany?: transaction_detailsUpdateManyWithWhereWithoutTransactionsInput | transaction_detailsUpdateManyWithWhereWithoutTransactionsInput[]
    deleteMany?: transaction_detailsScalarWhereInput | transaction_detailsScalarWhereInput[]
  }

  export type companiesCreateNestedOneWithoutUsersInput = {
    create?: XOR<companiesCreateWithoutUsersInput, companiesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: companiesCreateOrConnectWithoutUsersInput
    connect?: companiesWhereUniqueInput
  }

  export type companiesUpdateOneWithoutUsersNestedInput = {
    create?: XOR<companiesCreateWithoutUsersInput, companiesUncheckedCreateWithoutUsersInput>
    connectOrCreate?: companiesCreateOrConnectWithoutUsersInput
    upsert?: companiesUpsertWithoutUsersInput
    disconnect?: companiesWhereInput | boolean
    delete?: companiesWhereInput | boolean
    connect?: companiesWhereUniqueInput
    update?: XOR<XOR<companiesUpdateToOneWithWhereWithoutUsersInput, companiesUpdateWithoutUsersInput>, companiesUncheckedUpdateWithoutUsersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDecimalFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDecimalWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | ListDecimalFieldRefInput<$PrismaModel>
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedDecimalFilter<$PrismaModel>
    _sum?: NestedDecimalFilter<$PrismaModel>
    _min?: NestedDecimalFilter<$PrismaModel>
    _max?: NestedDecimalFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedUuidFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidFilter<$PrismaModel> | string
  }

  export type NestedUuidWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedUuidWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type company_goalsCreateWithoutCompaniesInput = {
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type company_goalsUncheckedCreateWithoutCompaniesInput = {
    id?: number
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type company_goalsCreateOrConnectWithoutCompaniesInput = {
    where: company_goalsWhereUniqueInput
    create: XOR<company_goalsCreateWithoutCompaniesInput, company_goalsUncheckedCreateWithoutCompaniesInput>
  }

  export type company_goalsCreateManyCompaniesInputEnvelope = {
    data: company_goalsCreateManyCompaniesInput | company_goalsCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type goalsCreateWithoutCompaniesInput = {
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type goalsUncheckedCreateWithoutCompaniesInput = {
    id?: number
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type goalsCreateOrConnectWithoutCompaniesInput = {
    where: goalsWhereUniqueInput
    create: XOR<goalsCreateWithoutCompaniesInput, goalsUncheckedCreateWithoutCompaniesInput>
  }

  export type goalsCreateManyCompaniesInputEnvelope = {
    data: goalsCreateManyCompaniesInput | goalsCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type transactionsCreateWithoutCompaniesInput = {
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transaction_details?: transaction_detailsCreateNestedManyWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutCompaniesInput = {
    id?: number
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    transaction_details?: transaction_detailsUncheckedCreateNestedManyWithoutTransactionsInput
  }

  export type transactionsCreateOrConnectWithoutCompaniesInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutCompaniesInput, transactionsUncheckedCreateWithoutCompaniesInput>
  }

  export type transactionsCreateManyCompaniesInputEnvelope = {
    data: transactionsCreateManyCompaniesInput | transactionsCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type usersCreateWithoutCompaniesInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name: string
    id?: string
  }

  export type usersUncheckedCreateWithoutCompaniesInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name: string
    id?: string
  }

  export type usersCreateOrConnectWithoutCompaniesInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput>
  }

  export type usersCreateManyCompaniesInputEnvelope = {
    data: usersCreateManyCompaniesInput | usersCreateManyCompaniesInput[]
    skipDuplicates?: boolean
  }

  export type company_goalsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: company_goalsWhereUniqueInput
    update: XOR<company_goalsUpdateWithoutCompaniesInput, company_goalsUncheckedUpdateWithoutCompaniesInput>
    create: XOR<company_goalsCreateWithoutCompaniesInput, company_goalsUncheckedCreateWithoutCompaniesInput>
  }

  export type company_goalsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: company_goalsWhereUniqueInput
    data: XOR<company_goalsUpdateWithoutCompaniesInput, company_goalsUncheckedUpdateWithoutCompaniesInput>
  }

  export type company_goalsUpdateManyWithWhereWithoutCompaniesInput = {
    where: company_goalsScalarWhereInput
    data: XOR<company_goalsUpdateManyMutationInput, company_goalsUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type company_goalsScalarWhereInput = {
    AND?: company_goalsScalarWhereInput | company_goalsScalarWhereInput[]
    OR?: company_goalsScalarWhereInput[]
    NOT?: company_goalsScalarWhereInput | company_goalsScalarWhereInput[]
    id?: IntFilter<"company_goals"> | number
    company_id?: IntNullableFilter<"company_goals"> | number | null
    goal_value?: DecimalFilter<"company_goals"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"company_goals"> | string
    deadline?: DateTimeFilter<"company_goals"> | Date | string
    created_at?: DateTimeNullableFilter<"company_goals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"company_goals"> | Date | string | null
  }

  export type goalsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: goalsWhereUniqueInput
    update: XOR<goalsUpdateWithoutCompaniesInput, goalsUncheckedUpdateWithoutCompaniesInput>
    create: XOR<goalsCreateWithoutCompaniesInput, goalsUncheckedCreateWithoutCompaniesInput>
  }

  export type goalsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: goalsWhereUniqueInput
    data: XOR<goalsUpdateWithoutCompaniesInput, goalsUncheckedUpdateWithoutCompaniesInput>
  }

  export type goalsUpdateManyWithWhereWithoutCompaniesInput = {
    where: goalsScalarWhereInput
    data: XOR<goalsUpdateManyMutationInput, goalsUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type goalsScalarWhereInput = {
    AND?: goalsScalarWhereInput | goalsScalarWhereInput[]
    OR?: goalsScalarWhereInput[]
    NOT?: goalsScalarWhereInput | goalsScalarWhereInput[]
    id?: IntFilter<"goals"> | number
    company_id?: IntNullableFilter<"goals"> | number | null
    goal_value?: DecimalFilter<"goals"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"goals"> | string
    deadline?: DateTimeFilter<"goals"> | Date | string
    created_at?: DateTimeNullableFilter<"goals"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"goals"> | Date | string | null
  }

  export type transactionsUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: transactionsWhereUniqueInput
    update: XOR<transactionsUpdateWithoutCompaniesInput, transactionsUncheckedUpdateWithoutCompaniesInput>
    create: XOR<transactionsCreateWithoutCompaniesInput, transactionsUncheckedCreateWithoutCompaniesInput>
  }

  export type transactionsUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: transactionsWhereUniqueInput
    data: XOR<transactionsUpdateWithoutCompaniesInput, transactionsUncheckedUpdateWithoutCompaniesInput>
  }

  export type transactionsUpdateManyWithWhereWithoutCompaniesInput = {
    where: transactionsScalarWhereInput
    data: XOR<transactionsUpdateManyMutationInput, transactionsUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type transactionsScalarWhereInput = {
    AND?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    OR?: transactionsScalarWhereInput[]
    NOT?: transactionsScalarWhereInput | transactionsScalarWhereInput[]
    id?: IntFilter<"transactions"> | number
    company_id?: IntNullableFilter<"transactions"> | number | null
    type?: StringFilter<"transactions"> | string
    amount?: DecimalFilter<"transactions"> | Decimal | DecimalJsLike | number | string
    description?: StringFilter<"transactions"> | string
    transaction_date?: DateTimeFilter<"transactions"> | Date | string
    created_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transactions"> | Date | string | null
  }

  export type usersUpsertWithWhereUniqueWithoutCompaniesInput = {
    where: usersWhereUniqueInput
    update: XOR<usersUpdateWithoutCompaniesInput, usersUncheckedUpdateWithoutCompaniesInput>
    create: XOR<usersCreateWithoutCompaniesInput, usersUncheckedCreateWithoutCompaniesInput>
  }

  export type usersUpdateWithWhereUniqueWithoutCompaniesInput = {
    where: usersWhereUniqueInput
    data: XOR<usersUpdateWithoutCompaniesInput, usersUncheckedUpdateWithoutCompaniesInput>
  }

  export type usersUpdateManyWithWhereWithoutCompaniesInput = {
    where: usersScalarWhereInput
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyWithoutCompaniesInput>
  }

  export type usersScalarWhereInput = {
    AND?: usersScalarWhereInput | usersScalarWhereInput[]
    OR?: usersScalarWhereInput[]
    NOT?: usersScalarWhereInput | usersScalarWhereInput[]
    email?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    role?: StringFilter<"users"> | string
    company_id?: IntNullableFilter<"users"> | number | null
    created_at?: DateTimeNullableFilter<"users"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"users"> | Date | string | null
    name?: StringFilter<"users"> | string
    id?: UuidFilter<"users"> | string
  }

  export type companiesCreateWithoutCompany_goalsInput = {
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    goals?: goalsCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsCreateNestedManyWithoutCompaniesInput
    users?: usersCreateNestedManyWithoutCompaniesInput
  }

  export type companiesUncheckedCreateWithoutCompany_goalsInput = {
    id?: number
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    goals?: goalsUncheckedCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutCompaniesInput
    users?: usersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutCompany_goalsInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutCompany_goalsInput, companiesUncheckedCreateWithoutCompany_goalsInput>
  }

  export type companiesUpsertWithoutCompany_goalsInput = {
    update: XOR<companiesUpdateWithoutCompany_goalsInput, companiesUncheckedUpdateWithoutCompany_goalsInput>
    create: XOR<companiesCreateWithoutCompany_goalsInput, companiesUncheckedCreateWithoutCompany_goalsInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutCompany_goalsInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutCompany_goalsInput, companiesUncheckedUpdateWithoutCompany_goalsInput>
  }

  export type companiesUpdateWithoutCompany_goalsInput = {
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUpdateManyWithoutCompaniesNestedInput
    users?: usersUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutCompany_goalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    goals?: goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: usersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesCreateWithoutGoalsInput = {
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsCreateNestedManyWithoutCompaniesInput
    users?: usersCreateNestedManyWithoutCompaniesInput
  }

  export type companiesUncheckedCreateWithoutGoalsInput = {
    id?: number
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsUncheckedCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutCompaniesInput
    users?: usersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutGoalsInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutGoalsInput, companiesUncheckedCreateWithoutGoalsInput>
  }

  export type companiesUpsertWithoutGoalsInput = {
    update: XOR<companiesUpdateWithoutGoalsInput, companiesUncheckedUpdateWithoutGoalsInput>
    create: XOR<companiesCreateWithoutGoalsInput, companiesUncheckedCreateWithoutGoalsInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutGoalsInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutGoalsInput, companiesUncheckedUpdateWithoutGoalsInput>
  }

  export type companiesUpdateWithoutGoalsInput = {
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUpdateManyWithoutCompaniesNestedInput
    users?: usersUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutGoalsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: usersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type transactionsCreateWithoutTransaction_detailsInput = {
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    companies?: companiesCreateNestedOneWithoutTransactionsInput
  }

  export type transactionsUncheckedCreateWithoutTransaction_detailsInput = {
    id?: number
    company_id?: number | null
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transactionsCreateOrConnectWithoutTransaction_detailsInput = {
    where: transactionsWhereUniqueInput
    create: XOR<transactionsCreateWithoutTransaction_detailsInput, transactionsUncheckedCreateWithoutTransaction_detailsInput>
  }

  export type transactionsUpsertWithoutTransaction_detailsInput = {
    update: XOR<transactionsUpdateWithoutTransaction_detailsInput, transactionsUncheckedUpdateWithoutTransaction_detailsInput>
    create: XOR<transactionsCreateWithoutTransaction_detailsInput, transactionsUncheckedCreateWithoutTransaction_detailsInput>
    where?: transactionsWhereInput
  }

  export type transactionsUpdateToOneWithWhereWithoutTransaction_detailsInput = {
    where?: transactionsWhereInput
    data: XOR<transactionsUpdateWithoutTransaction_detailsInput, transactionsUncheckedUpdateWithoutTransaction_detailsInput>
  }

  export type transactionsUpdateWithoutTransaction_detailsInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    companies?: companiesUpdateOneWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutTransaction_detailsInput = {
    id?: IntFieldUpdateOperationsInput | number
    company_id?: NullableIntFieldUpdateOperationsInput | number | null
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transaction_detailsCreateWithoutTransactionsInput = {
    detail_type: string
    detail_value: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transaction_detailsUncheckedCreateWithoutTransactionsInput = {
    id?: number
    detail_type: string
    detail_value: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transaction_detailsCreateOrConnectWithoutTransactionsInput = {
    where: transaction_detailsWhereUniqueInput
    create: XOR<transaction_detailsCreateWithoutTransactionsInput, transaction_detailsUncheckedCreateWithoutTransactionsInput>
  }

  export type transaction_detailsCreateManyTransactionsInputEnvelope = {
    data: transaction_detailsCreateManyTransactionsInput | transaction_detailsCreateManyTransactionsInput[]
    skipDuplicates?: boolean
  }

  export type companiesCreateWithoutTransactionsInput = {
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsCreateNestedManyWithoutCompaniesInput
    goals?: goalsCreateNestedManyWithoutCompaniesInput
    users?: usersCreateNestedManyWithoutCompaniesInput
  }

  export type companiesUncheckedCreateWithoutTransactionsInput = {
    id?: number
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsUncheckedCreateNestedManyWithoutCompaniesInput
    goals?: goalsUncheckedCreateNestedManyWithoutCompaniesInput
    users?: usersUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutTransactionsInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutTransactionsInput, companiesUncheckedCreateWithoutTransactionsInput>
  }

  export type transaction_detailsUpsertWithWhereUniqueWithoutTransactionsInput = {
    where: transaction_detailsWhereUniqueInput
    update: XOR<transaction_detailsUpdateWithoutTransactionsInput, transaction_detailsUncheckedUpdateWithoutTransactionsInput>
    create: XOR<transaction_detailsCreateWithoutTransactionsInput, transaction_detailsUncheckedCreateWithoutTransactionsInput>
  }

  export type transaction_detailsUpdateWithWhereUniqueWithoutTransactionsInput = {
    where: transaction_detailsWhereUniqueInput
    data: XOR<transaction_detailsUpdateWithoutTransactionsInput, transaction_detailsUncheckedUpdateWithoutTransactionsInput>
  }

  export type transaction_detailsUpdateManyWithWhereWithoutTransactionsInput = {
    where: transaction_detailsScalarWhereInput
    data: XOR<transaction_detailsUpdateManyMutationInput, transaction_detailsUncheckedUpdateManyWithoutTransactionsInput>
  }

  export type transaction_detailsScalarWhereInput = {
    AND?: transaction_detailsScalarWhereInput | transaction_detailsScalarWhereInput[]
    OR?: transaction_detailsScalarWhereInput[]
    NOT?: transaction_detailsScalarWhereInput | transaction_detailsScalarWhereInput[]
    id?: IntFilter<"transaction_details"> | number
    transaction_id?: IntNullableFilter<"transaction_details"> | number | null
    detail_type?: StringFilter<"transaction_details"> | string
    detail_value?: DecimalFilter<"transaction_details"> | Decimal | DecimalJsLike | number | string
    created_at?: DateTimeNullableFilter<"transaction_details"> | Date | string | null
    updated_at?: DateTimeNullableFilter<"transaction_details"> | Date | string | null
  }

  export type companiesUpsertWithoutTransactionsInput = {
    update: XOR<companiesUpdateWithoutTransactionsInput, companiesUncheckedUpdateWithoutTransactionsInput>
    create: XOR<companiesCreateWithoutTransactionsInput, companiesUncheckedCreateWithoutTransactionsInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutTransactionsInput, companiesUncheckedUpdateWithoutTransactionsInput>
  }

  export type companiesUpdateWithoutTransactionsInput = {
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUpdateManyWithoutCompaniesNestedInput
    goals?: goalsUpdateManyWithoutCompaniesNestedInput
    users?: usersUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    goals?: goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    users?: usersUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesCreateWithoutUsersInput = {
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsCreateNestedManyWithoutCompaniesInput
    goals?: goalsCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsCreateNestedManyWithoutCompaniesInput
  }

  export type companiesUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    revenue: Decimal | DecimalJsLike | number | string
    expenses: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    company_goals?: company_goalsUncheckedCreateNestedManyWithoutCompaniesInput
    goals?: goalsUncheckedCreateNestedManyWithoutCompaniesInput
    transactions?: transactionsUncheckedCreateNestedManyWithoutCompaniesInput
  }

  export type companiesCreateOrConnectWithoutUsersInput = {
    where: companiesWhereUniqueInput
    create: XOR<companiesCreateWithoutUsersInput, companiesUncheckedCreateWithoutUsersInput>
  }

  export type companiesUpsertWithoutUsersInput = {
    update: XOR<companiesUpdateWithoutUsersInput, companiesUncheckedUpdateWithoutUsersInput>
    create: XOR<companiesCreateWithoutUsersInput, companiesUncheckedCreateWithoutUsersInput>
    where?: companiesWhereInput
  }

  export type companiesUpdateToOneWithWhereWithoutUsersInput = {
    where?: companiesWhereInput
    data: XOR<companiesUpdateWithoutUsersInput, companiesUncheckedUpdateWithoutUsersInput>
  }

  export type companiesUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUpdateManyWithoutCompaniesNestedInput
    goals?: goalsUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUpdateManyWithoutCompaniesNestedInput
  }

  export type companiesUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    revenue?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    expenses?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    company_goals?: company_goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    goals?: goalsUncheckedUpdateManyWithoutCompaniesNestedInput
    transactions?: transactionsUncheckedUpdateManyWithoutCompaniesNestedInput
  }

  export type company_goalsCreateManyCompaniesInput = {
    id?: number
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type goalsCreateManyCompaniesInput = {
    id?: number
    goal_value: Decimal | DecimalJsLike | number | string
    description: string
    deadline: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transactionsCreateManyCompaniesInput = {
    id?: number
    type: string
    amount: Decimal | DecimalJsLike | number | string
    description: string
    transaction_date: Date | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type usersCreateManyCompaniesInput = {
    email: string
    password: string
    role: string
    created_at?: Date | string | null
    updated_at?: Date | string | null
    name: string
    id?: string
  }

  export type company_goalsUpdateWithoutCompaniesInput = {
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type company_goalsUncheckedUpdateWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type company_goalsUncheckedUpdateManyWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsUpdateWithoutCompaniesInput = {
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsUncheckedUpdateWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type goalsUncheckedUpdateManyWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    goal_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    deadline?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transactionsUpdateWithoutCompaniesInput = {
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_details?: transaction_detailsUpdateManyWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    transaction_details?: transaction_detailsUncheckedUpdateManyWithoutTransactionsNestedInput
  }

  export type transactionsUncheckedUpdateManyWithoutCompaniesInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    amount?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    description?: StringFieldUpdateOperationsInput | string
    transaction_date?: DateTimeFieldUpdateOperationsInput | Date | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type usersUpdateWithoutCompaniesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateWithoutCompaniesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type usersUncheckedUpdateManyWithoutCompaniesInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    name?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type transaction_detailsCreateManyTransactionsInput = {
    id?: number
    detail_type: string
    detail_value: Decimal | DecimalJsLike | number | string
    created_at?: Date | string | null
    updated_at?: Date | string | null
  }

  export type transaction_detailsUpdateWithoutTransactionsInput = {
    detail_type?: StringFieldUpdateOperationsInput | string
    detail_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transaction_detailsUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    detail_type?: StringFieldUpdateOperationsInput | string
    detail_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type transaction_detailsUncheckedUpdateManyWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    detail_type?: StringFieldUpdateOperationsInput | string
    detail_value?: DecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string
    created_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updated_at?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}